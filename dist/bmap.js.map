{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAmBA,MAAM,6BAAO;UACT;iBACA;wBACA;AACJ;AAEA,IAAI,OAAO,WAAW,aAAa;IAC/B,OAAO,IAAI,GAAG;IAEd,IAAI,CAAA,GAAA,iBAAM,AAAD,KAAK,CAAC,OAAO,MAAM,EAEtB,OAAO,MAAM,GAAW,CAAA,GAAA,iBAAM,AAAD;IAEnC,wBAAwB;IACxB,+BAA+B;IAC/B,wBAAwB;IACxB,IAAI,CAAC,OAAO,MAAM,EACd,OAAO,MAAM,GAAG,CAAA,GAAA,aAAK;AAE7B,CAAC;IAED,2CAAe","sources":["src/browser.ts"],"sourcesContent":["import { Buffer } from 'buffer'\nimport crypto from 'node:crypto'\nimport { BMAP, supportedProtocols, TransformTx } from './bmap'\n\n// import { BOOST } from './protocols/boost'\nexport type bmapjs = {\n    BMAP: typeof BMAP\n    TransformTx: typeof TransformTx\n    supportedProtocols: string[]\n}\n\ndeclare global {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-definitions\n    interface Window {\n        bmap: bmapjs\n        crypto: typeof crypto\n    }\n}\n\nconst bmap = {\n    BMAP,\n    TransformTx,\n    supportedProtocols,\n} as bmapjs\n\nif (typeof window !== 'undefined') {\n    window.bmap = bmap\n\n    if (crypto && !window.crypto) {\n        // no way this works lol\n        ;(window.crypto as any) = crypto\n    }\n    // const bm = new BMAP()\n    // bm.addProtocolHandler(BOOST)\n    // window.bmap.bmap = bm\n    if (!window.Buffer) {\n        window.Buffer = Buffer\n    }\n}\n\nexport default bmap\n"],"names":[],"version":3,"file":"bmap.js.map","sourceRoot":"../"}