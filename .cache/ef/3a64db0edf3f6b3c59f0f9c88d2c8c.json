{"id":"utils.ts","dependencies":[{"name":"D:\\code\\bmap\\tsconfig.json","includedInParent":true,"mtime":1672330088416},{"name":"D:\\code\\bmap\\package.json","includedInParent":true,"mtime":1672330103231},{"name":"crypto","loc":{"line":4,"column":25,"index":260},"parent":"D:\\code\\bmap\\src\\utils.ts","resolved":"D:\\code\\bmap\\node_modules\\crypto-browserify\\index.js"},{"name":"buffer","parent":"D:\\code\\bmap\\src\\utils.ts","resolved":"D:\\code\\bmap\\node_modules\\buffer\\index.js"}],"generated":{"js":"var define;\nvar Buffer = require(\"buffer\").Buffer;\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sha256 = exports.isBase64 = exports.bmapQuerySchemaHandler = exports.saveProtocolData = exports.checkOpFalseOpReturn = exports.cellValue = void 0;\nvar crypto_1 = require(\"crypto\");\n/**\r\n * returns the BOB cell value for a given encoding\r\n *\r\n * @param pushData\r\n * @param schemaEncoding\r\n * @returns {string|number}\r\n */\nvar cellValue = function cellValue(pushData, schemaEncoding) {\n  if (!pushData) {\n    throw new Error(\"cannot get cell value of: \".concat(pushData));\n  } else if (schemaEncoding === 'string') {\n    return pushData['s'] ? pushData.s : pushData.ls;\n  } else if (schemaEncoding === 'hex') {\n    return pushData['h'] ? pushData.h : pushData.lh;\n  } else if (schemaEncoding === 'number') {\n    return parseInt(pushData['h'] ? pushData.h : pushData.lh || '0', 16);\n  } else if (schemaEncoding === 'file') {\n    return \"bitfs://\".concat(pushData['f'] ? pushData.f : pushData.lf);\n  }\n  return pushData['b'] ? pushData.b : pushData.lb;\n};\nexports.cellValue = cellValue;\n/**\r\n * Check a cell starts with OP_FALSE OP_RETURN -or- OP_RETURN\r\n *\r\n * @param cc\r\n * @returns {boolean}\r\n */\nvar checkOpFalseOpReturn = function checkOpFalseOpReturn(cc) {\n  return cc.cell[0] && cc.cell[1] && cc.cell[0].op === 0 && cc.cell[1].op && cc.cell[1].op === 106 || cc.cell[0].op === 106;\n};\nexports.checkOpFalseOpReturn = checkOpFalseOpReturn;\n/**\r\n * Helper function to store protocol data\r\n *\r\n * @param dataObj\r\n * @param protocolName\r\n * @param data\r\n */\nvar saveProtocolData = function saveProtocolData(dataObj, protocolName, data) {\n  if (!dataObj[protocolName]) {\n    dataObj[protocolName] = [data];\n  } else {\n    // if (!Array.isArray(dataObj[protocolName])) {\n    //     const prevData = dataObj[protocolName]\n    //     dataObj[protocolName] = []\n    //     dataObj[protocolName][0] = prevData\n    // }\n    dataObj[protocolName][dataObj[protocolName].length] = data;\n  }\n};\nexports.saveProtocolData = saveProtocolData;\n/**\r\n * BMAP default handler to work with query schema's\r\n *\r\n * @param querySchema\r\n * @param protocolName\r\n * @param dataObj\r\n * @param cell\r\n * @param tape\r\n * @param tx\r\n */\nvar bmapQuerySchemaHandler = function bmapQuerySchemaHandler(protocolName, querySchema, dataObj, cell, tape, tx) {\n  // loop over the schema\n  var obj = {};\n  // Does not have the required number of fields\n  var length = querySchema.length + 1;\n  if (cell.length < length) {\n    throw new Error(\"\".concat(protocolName, \" requires at least \").concat(length, \" fields including the prefix: \").concat(tx.tx.h));\n  }\n  for (var _i = 0, _Object$entries = Object.entries(querySchema); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      idx = _Object$entries$_i[0],\n      schemaField = _Object$entries$_i[1];\n    var x = parseInt(idx, 10);\n    var _Object$keys = Object.keys(schemaField),\n      _Object$keys2 = _slicedToArray(_Object$keys, 1),\n      field = _Object$keys2[0];\n    var _Object$values = Object.values(schemaField),\n      _Object$values2 = _slicedToArray(_Object$values, 1),\n      schemaEncoding = _Object$values2[0];\n    obj[field] = (0, exports.cellValue)(cell[x + 1], schemaEncoding);\n  }\n  (0, exports.saveProtocolData)(dataObj, protocolName, obj);\n};\nexports.bmapQuerySchemaHandler = bmapQuerySchemaHandler;\n/**\r\n * Check whether the given data is base64\r\n *\r\n * @param data\r\n * @returns {boolean}\r\n */\nvar isBase64 = function isBase64(data) {\n  var regex = '(?:[A-Za-z0-9+\\\\/]{4})*(?:[A-Za-z0-9+\\\\/]{2}==|[A-Za-z0-9+/]{3}=)?';\n  return new RegExp(\"^\".concat(regex, \"$\"), 'gi').test(data);\n};\nexports.isBase64 = isBase64;\n// hashes a message buffer, returns the hash as a buffer\nvar sha256 = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(msgBuffer) {\n    var hash;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return crypto_1.webcrypto.subtle.digest('SHA-256', msgBuffer);\n        case 2:\n          hash = _context.sent;\n          return _context.abrupt(\"return\", Buffer.from(hash));\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function sha256(_x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexports.sha256 = sha256;"},"sourceMaps":{"js":{"mappings":[{"source":"utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":19,"column":0}},{"source":"utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":19,"column":4}},{"source":"utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":19,"column":12}},{"source":"utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":19,"column":15}},{"source":"utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":19,"column":22}},{"source":"utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":19,"column":23}},{"source":"utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":19,"column":31}},{"source":"utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":19,"column":32}},{"source":"utils.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":20,"column":0}},{"source":"utils.ts","name":null,"original":{"line":10,"column":7},"generated":{"line":27,"column":0}},{"source":"utils.ts","name":null,"original":{"line":10,"column":13},"generated":{"line":27,"column":4}},{"source":"utils.ts","name":null,"original":{"line":10,"column":22},"generated":{"line":27,"column":13}},{"source":"utils.ts","name":null,"original":{"line":10,"column":25},"generated":{"line":27,"column":16}},{"source":"utils.ts","name":null,"original":{"line":10,"column":13},"generated":{"line":27,"column":25}},{"source":"utils.ts","name":null,"original":{"line":10,"column":22},"generated":{"line":27,"column":34}},{"source":"utils.ts","name":null,"original":{"line":10,"column":35},"generated":{"line":27,"column":35}},{"source":"utils.ts","name":null,"original":{"line":10,"column":49},"generated":{"line":27,"column":43}},{"source":"utils.ts","name":null,"original":{"line":10,"column":51},"generated":{"line":27,"column":45}},{"source":"utils.ts","name":null,"original":{"line":10,"column":73},"generated":{"line":27,"column":59}},{"source":"utils.ts","name":null,"original":{"line":10,"column":73},"generated":{"line":27,"column":61}},{"source":"utils.ts","name":null,"original":{"line":11,"column":4},"generated":{"line":28,"column":2}},{"source":"utils.ts","name":null,"original":{"line":11,"column":8},"generated":{"line":28,"column":6}},{"source":"utils.ts","name":null,"original":{"line":11,"column":9},"generated":{"line":28,"column":7}},{"source":"utils.ts","name":null,"original":{"line":11,"column":17},"generated":{"line":28,"column":15}},{"source":"utils.ts","name":null,"original":{"line":11,"column":19},"generated":{"line":28,"column":17}},{"source":"utils.ts","name":null,"original":{"line":12,"column":8},"generated":{"line":29,"column":4}},{"source":"utils.ts","name":null,"original":{"line":12,"column":14},"generated":{"line":29,"column":10}},{"source":"utils.ts","name":null,"original":{"line":12,"column":18},"generated":{"line":29,"column":14}},{"source":"utils.ts","name":null,"original":{"line":12,"column":23},"generated":{"line":29,"column":19}},{"source":"utils.ts","name":null,"original":{"line":12,"column":53},"generated":{"line":29,"column":56}},{"source":"utils.ts","name":null,"original":{"line":12,"column":61},"generated":{"line":29,"column":64}},{"source":"utils.ts","name":null,"original":{"line":12,"column":64},"generated":{"line":29,"column":66}},{"source":"utils.ts","name":null,"original":{"line":13,"column":5},"generated":{"line":30,"column":3}},{"source":"utils.ts","name":null,"original":{"line":13,"column":11},"generated":{"line":30,"column":9}},{"source":"utils.ts","name":null,"original":{"line":13,"column":15},"generated":{"line":30,"column":13}},{"source":"utils.ts","name":null,"original":{"line":13,"column":29},"generated":{"line":30,"column":27}},{"source":"utils.ts","name":null,"original":{"line":13,"column":34},"generated":{"line":30,"column":32}},{"source":"utils.ts","name":null,"original":{"line":13,"column":42},"generated":{"line":30,"column":40}},{"source":"utils.ts","name":null,"original":{"line":13,"column":44},"generated":{"line":30,"column":42}},{"source":"utils.ts","name":null,"original":{"line":14,"column":8},"generated":{"line":31,"column":4}},{"source":"utils.ts","name":null,"original":{"line":14,"column":15},"generated":{"line":31,"column":11}},{"source":"utils.ts","name":null,"original":{"line":14,"column":23},"generated":{"line":31,"column":19}},{"source":"utils.ts","name":null,"original":{"line":14,"column":24},"generated":{"line":31,"column":20}},{"source":"utils.ts","name":null,"original":{"line":14,"column":27},"generated":{"line":31,"column":23}},{"source":"utils.ts","name":null,"original":{"line":14,"column":28},"generated":{"line":31,"column":24}},{"source":"utils.ts","name":null,"original":{"line":14,"column":31},"generated":{"line":31,"column":27}},{"source":"utils.ts","name":null,"original":{"line":14,"column":39},"generated":{"line":31,"column":35}},{"source":"utils.ts","name":null,"original":{"line":14,"column":40},"generated":{"line":31,"column":36}},{"source":"utils.ts","name":null,"original":{"line":14,"column":41},"generated":{"line":31,"column":37}},{"source":"utils.ts","name":null,"original":{"line":14,"column":44},"generated":{"line":31,"column":40}},{"source":"utils.ts","name":null,"original":{"line":14,"column":52},"generated":{"line":31,"column":48}},{"source":"utils.ts","name":null,"original":{"line":14,"column":53},"generated":{"line":31,"column":49}},{"source":"utils.ts","name":null,"original":{"line":14,"column":55},"generated":{"line":31,"column":51}},{"source":"utils.ts","name":null,"original":{"line":15,"column":5},"generated":{"line":32,"column":3}},{"source":"utils.ts","name":null,"original":{"line":15,"column":11},"generated":{"line":32,"column":9}},{"source":"utils.ts","name":null,"original":{"line":15,"column":15},"generated":{"line":32,"column":13}},{"source":"utils.ts","name":null,"original":{"line":15,"column":29},"generated":{"line":32,"column":27}},{"source":"utils.ts","name":null,"original":{"line":15,"column":34},"generated":{"line":32,"column":32}},{"source":"utils.ts","name":null,"original":{"line":15,"column":39},"generated":{"line":32,"column":37}},{"source":"utils.ts","name":null,"original":{"line":15,"column":41},"generated":{"line":32,"column":39}},{"source":"utils.ts","name":null,"original":{"line":16,"column":8},"generated":{"line":33,"column":4}},{"source":"utils.ts","name":null,"original":{"line":16,"column":15},"generated":{"line":33,"column":11}},{"source":"utils.ts","name":null,"original":{"line":16,"column":23},"generated":{"line":33,"column":19}},{"source":"utils.ts","name":null,"original":{"line":16,"column":24},"generated":{"line":33,"column":20}},{"source":"utils.ts","name":null,"original":{"line":16,"column":27},"generated":{"line":33,"column":23}},{"source":"utils.ts","name":null,"original":{"line":16,"column":28},"generated":{"line":33,"column":24}},{"source":"utils.ts","name":null,"original":{"line":16,"column":31},"generated":{"line":33,"column":27}},{"source":"utils.ts","name":null,"original":{"line":16,"column":39},"generated":{"line":33,"column":35}},{"source":"utils.ts","name":null,"original":{"line":16,"column":40},"generated":{"line":33,"column":36}},{"source":"utils.ts","name":null,"original":{"line":16,"column":41},"generated":{"line":33,"column":37}},{"source":"utils.ts","name":null,"original":{"line":16,"column":44},"generated":{"line":33,"column":40}},{"source":"utils.ts","name":null,"original":{"line":16,"column":52},"generated":{"line":33,"column":48}},{"source":"utils.ts","name":null,"original":{"line":16,"column":53},"generated":{"line":33,"column":49}},{"source":"utils.ts","name":null,"original":{"line":16,"column":55},"generated":{"line":33,"column":51}},{"source":"utils.ts","name":null,"original":{"line":17,"column":5},"generated":{"line":34,"column":3}},{"source":"utils.ts","name":null,"original":{"line":17,"column":11},"generated":{"line":34,"column":9}},{"source":"utils.ts","name":null,"original":{"line":17,"column":15},"generated":{"line":34,"column":13}},{"source":"utils.ts","name":null,"original":{"line":17,"column":29},"generated":{"line":34,"column":27}},{"source":"utils.ts","name":null,"original":{"line":17,"column":34},"generated":{"line":34,"column":32}},{"source":"utils.ts","name":null,"original":{"line":17,"column":42},"generated":{"line":34,"column":40}},{"source":"utils.ts","name":null,"original":{"line":17,"column":44},"generated":{"line":34,"column":42}},{"source":"utils.ts","name":null,"original":{"line":18,"column":8},"generated":{"line":35,"column":4}},{"source":"utils.ts","name":null,"original":{"line":18,"column":15},"generated":{"line":35,"column":11}},{"source":"utils.ts","name":null,"original":{"line":18,"column":23},"generated":{"line":35,"column":19}},{"source":"utils.ts","name":null,"original":{"line":18,"column":24},"generated":{"line":35,"column":20}},{"source":"utils.ts","name":null,"original":{"line":18,"column":32},"generated":{"line":35,"column":28}},{"source":"utils.ts","name":null,"original":{"line":18,"column":33},"generated":{"line":35,"column":29}},{"source":"utils.ts","name":null,"original":{"line":18,"column":36},"generated":{"line":35,"column":32}},{"source":"utils.ts","name":null,"original":{"line":18,"column":37},"generated":{"line":35,"column":33}},{"source":"utils.ts","name":null,"original":{"line":18,"column":40},"generated":{"line":35,"column":36}},{"source":"utils.ts","name":null,"original":{"line":18,"column":48},"generated":{"line":35,"column":44}},{"source":"utils.ts","name":null,"original":{"line":18,"column":49},"generated":{"line":35,"column":45}},{"source":"utils.ts","name":null,"original":{"line":18,"column":50},"generated":{"line":35,"column":46}},{"source":"utils.ts","name":null,"original":{"line":18,"column":53},"generated":{"line":35,"column":49}},{"source":"utils.ts","name":null,"original":{"line":18,"column":61},"generated":{"line":35,"column":57}},{"source":"utils.ts","name":null,"original":{"line":18,"column":62},"generated":{"line":35,"column":58}},{"source":"utils.ts","name":null,"original":{"line":18,"column":64},"generated":{"line":35,"column":60}},{"source":"utils.ts","name":null,"original":{"line":18,"column":68},"generated":{"line":35,"column":64}},{"source":"utils.ts","name":null,"original":{"line":18,"column":71},"generated":{"line":35,"column":67}},{"source":"utils.ts","name":null,"original":{"line":18,"column":73},"generated":{"line":35,"column":69}},{"source":"utils.ts","name":null,"original":{"line":18,"column":75},"generated":{"line":35,"column":71}},{"source":"utils.ts","name":null,"original":{"line":18,"column":76},"generated":{"line":35,"column":72}},{"source":"utils.ts","name":null,"original":{"line":19,"column":5},"generated":{"line":36,"column":3}},{"source":"utils.ts","name":null,"original":{"line":19,"column":11},"generated":{"line":36,"column":9}},{"source":"utils.ts","name":null,"original":{"line":19,"column":15},"generated":{"line":36,"column":13}},{"source":"utils.ts","name":null,"original":{"line":19,"column":29},"generated":{"line":36,"column":27}},{"source":"utils.ts","name":null,"original":{"line":19,"column":34},"generated":{"line":36,"column":32}},{"source":"utils.ts","name":null,"original":{"line":19,"column":40},"generated":{"line":36,"column":38}},{"source":"utils.ts","name":null,"original":{"line":19,"column":42},"generated":{"line":36,"column":40}},{"source":"utils.ts","name":null,"original":{"line":20,"column":8},"generated":{"line":37,"column":4}},{"source":"utils.ts","name":null,"original":{"line":20,"column":26},"generated":{"line":37,"column":29}},{"source":"utils.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":37,"column":37}},{"source":"utils.ts","name":null,"original":{"line":20,"column":35},"generated":{"line":37,"column":38}},{"source":"utils.ts","name":null,"original":{"line":20,"column":38},"generated":{"line":37,"column":41}},{"source":"utils.ts","name":null,"original":{"line":20,"column":39},"generated":{"line":37,"column":42}},{"source":"utils.ts","name":null,"original":{"line":20,"column":42},"generated":{"line":37,"column":45}},{"source":"utils.ts","name":null,"original":{"line":20,"column":50},"generated":{"line":37,"column":53}},{"source":"utils.ts","name":null,"original":{"line":20,"column":51},"generated":{"line":37,"column":54}},{"source":"utils.ts","name":null,"original":{"line":20,"column":52},"generated":{"line":37,"column":55}},{"source":"utils.ts","name":null,"original":{"line":20,"column":55},"generated":{"line":37,"column":58}},{"source":"utils.ts","name":null,"original":{"line":20,"column":63},"generated":{"line":37,"column":66}},{"source":"utils.ts","name":null,"original":{"line":20,"column":64},"generated":{"line":37,"column":67}},{"source":"utils.ts","name":null,"original":{"line":20,"column":66},"generated":{"line":37,"column":69}},{"source":"utils.ts","name":null,"original":{"line":23,"column":4},"generated":{"line":39,"column":2}},{"source":"utils.ts","name":null,"original":{"line":23,"column":11},"generated":{"line":39,"column":9}},{"source":"utils.ts","name":null,"original":{"line":23,"column":19},"generated":{"line":39,"column":17}},{"source":"utils.ts","name":null,"original":{"line":23,"column":20},"generated":{"line":39,"column":18}},{"source":"utils.ts","name":null,"original":{"line":23,"column":23},"generated":{"line":39,"column":21}},{"source":"utils.ts","name":null,"original":{"line":23,"column":24},"generated":{"line":39,"column":22}},{"source":"utils.ts","name":null,"original":{"line":23,"column":27},"generated":{"line":39,"column":25}},{"source":"utils.ts","name":null,"original":{"line":23,"column":35},"generated":{"line":39,"column":33}},{"source":"utils.ts","name":null,"original":{"line":23,"column":36},"generated":{"line":39,"column":34}},{"source":"utils.ts","name":null,"original":{"line":23,"column":37},"generated":{"line":39,"column":35}},{"source":"utils.ts","name":null,"original":{"line":23,"column":40},"generated":{"line":39,"column":38}},{"source":"utils.ts","name":null,"original":{"line":23,"column":48},"generated":{"line":39,"column":46}},{"source":"utils.ts","name":null,"original":{"line":23,"column":49},"generated":{"line":39,"column":47}},{"source":"utils.ts","name":null,"original":{"line":23,"column":51},"generated":{"line":39,"column":49}},{"source":"utils.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":40,"column":0}},{"source":"utils.ts","name":null,"original":{"line":24,"column":1},"generated":{"line":40,"column":1}},{"source":"utils.ts","name":null,"original":{"line":10,"column":13},"generated":{"line":41,"column":0}},{"source":"utils.ts","name":null,"original":{"line":10,"column":13},"generated":{"line":41,"column":7}},{"source":"utils.ts","name":null,"original":{"line":10,"column":13},"generated":{"line":41,"column":8}},{"source":"utils.ts","name":null,"original":{"line":10,"column":22},"generated":{"line":41,"column":17}},{"source":"utils.ts","name":null,"original":{"line":10,"column":22},"generated":{"line":41,"column":20}},{"source":"utils.ts","name":null,"original":{"line":10,"column":22},"generated":{"line":41,"column":29}},{"source":"utils.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":42,"column":0}},{"source":"utils.ts","name":null,"original":{"line":32,"column":7},"generated":{"line":48,"column":0}},{"source":"utils.ts","name":null,"original":{"line":32,"column":13},"generated":{"line":48,"column":4}},{"source":"utils.ts","name":null,"original":{"line":32,"column":33},"generated":{"line":48,"column":24}},{"source":"utils.ts","name":null,"original":{"line":32,"column":36},"generated":{"line":48,"column":27}},{"source":"utils.ts","name":null,"original":{"line":32,"column":13},"generated":{"line":48,"column":36}},{"source":"utils.ts","name":null,"original":{"line":32,"column":33},"generated":{"line":48,"column":56}},{"source":"utils.ts","name":null,"original":{"line":32,"column":46},"generated":{"line":48,"column":57}},{"source":"utils.ts","name":null,"original":{"line":32,"column":54},"generated":{"line":48,"column":59}},{"source":"utils.ts","name":null,"original":{"line":32,"column":54},"generated":{"line":48,"column":61}},{"source":"utils.ts","name":null,"original":{"line":33,"column":4},"generated":{"line":49,"column":2}},{"source":"utils.ts","name":null,"original":{"line":34,"column":9},"generated":{"line":49,"column":9}},{"source":"utils.ts","name":null,"original":{"line":34,"column":11},"generated":{"line":49,"column":11}},{"source":"utils.ts","name":null,"original":{"line":34,"column":12},"generated":{"line":49,"column":12}},{"source":"utils.ts","name":null,"original":{"line":34,"column":16},"generated":{"line":49,"column":16}},{"source":"utils.ts","name":null,"original":{"line":34,"column":17},"generated":{"line":49,"column":17}},{"source":"utils.ts","name":null,"original":{"line":34,"column":18},"generated":{"line":49,"column":18}},{"source":"utils.ts","name":null,"original":{"line":34,"column":19},"generated":{"line":49,"column":19}},{"source":"utils.ts","name":null,"original":{"line":35,"column":12},"generated":{"line":49,"column":23}},{"source":"utils.ts","name":null,"original":{"line":35,"column":14},"generated":{"line":49,"column":25}},{"source":"utils.ts","name":null,"original":{"line":35,"column":15},"generated":{"line":49,"column":26}},{"source":"utils.ts","name":null,"original":{"line":35,"column":19},"generated":{"line":49,"column":30}},{"source":"utils.ts","name":null,"original":{"line":35,"column":20},"generated":{"line":49,"column":31}},{"source":"utils.ts","name":null,"original":{"line":35,"column":21},"generated":{"line":49,"column":32}},{"source":"utils.ts","name":null,"original":{"line":35,"column":22},"generated":{"line":49,"column":33}},{"source":"utils.ts","name":null,"original":{"line":36,"column":12},"generated":{"line":49,"column":37}},{"source":"utils.ts","name":null,"original":{"line":36,"column":14},"generated":{"line":49,"column":39}},{"source":"utils.ts","name":null,"original":{"line":36,"column":15},"generated":{"line":49,"column":40}},{"source":"utils.ts","name":null,"original":{"line":36,"column":19},"generated":{"line":49,"column":44}},{"source":"utils.ts","name":null,"original":{"line":36,"column":20},"generated":{"line":49,"column":45}},{"source":"utils.ts","name":null,"original":{"line":36,"column":21},"generated":{"line":49,"column":46}},{"source":"utils.ts","name":null,"original":{"line":36,"column":22},"generated":{"line":49,"column":47}},{"source":"utils.ts","name":null,"original":{"line":36,"column":23},"generated":{"line":49,"column":48}},{"source":"utils.ts","name":null,"original":{"line":36,"column":25},"generated":{"line":49,"column":50}},{"source":"utils.ts","name":null,"original":{"line":36,"column":30},"generated":{"line":49,"column":55}},{"source":"utils.ts","name":null,"original":{"line":36,"column":31},"generated":{"line":49,"column":56}},{"source":"utils.ts","name":null,"original":{"line":37,"column":12},"generated":{"line":49,"column":60}},{"source":"utils.ts","name":null,"original":{"line":37,"column":14},"generated":{"line":49,"column":62}},{"source":"utils.ts","name":null,"original":{"line":37,"column":15},"generated":{"line":49,"column":63}},{"source":"utils.ts","name":null,"original":{"line":37,"column":19},"generated":{"line":49,"column":67}},{"source":"utils.ts","name":null,"original":{"line":37,"column":20},"generated":{"line":49,"column":68}},{"source":"utils.ts","name":null,"original":{"line":37,"column":21},"generated":{"line":49,"column":69}},{"source":"utils.ts","name":null,"original":{"line":37,"column":22},"generated":{"line":49,"column":70}},{"source":"utils.ts","name":null,"original":{"line":37,"column":23},"generated":{"line":49,"column":71}},{"source":"utils.ts","name":null,"original":{"line":37,"column":25},"generated":{"line":49,"column":73}},{"source":"utils.ts","name":null,"original":{"line":38,"column":12},"generated":{"line":49,"column":77}},{"source":"utils.ts","name":null,"original":{"line":38,"column":14},"generated":{"line":49,"column":79}},{"source":"utils.ts","name":null,"original":{"line":38,"column":15},"generated":{"line":49,"column":80}},{"source":"utils.ts","name":null,"original":{"line":38,"column":19},"generated":{"line":49,"column":84}},{"source":"utils.ts","name":null,"original":{"line":38,"column":20},"generated":{"line":49,"column":85}},{"source":"utils.ts","name":null,"original":{"line":38,"column":21},"generated":{"line":49,"column":86}},{"source":"utils.ts","name":null,"original":{"line":38,"column":22},"generated":{"line":49,"column":87}},{"source":"utils.ts","name":null,"original":{"line":38,"column":23},"generated":{"line":49,"column":88}},{"source":"utils.ts","name":null,"original":{"line":38,"column":25},"generated":{"line":49,"column":90}},{"source":"utils.ts","name":null,"original":{"line":38,"column":30},"generated":{"line":49,"column":95}},{"source":"utils.ts","name":null,"original":{"line":38,"column":33},"generated":{"line":49,"column":98}},{"source":"utils.ts","name":null,"original":{"line":39,"column":8},"generated":{"line":49,"column":102}},{"source":"utils.ts","name":null,"original":{"line":39,"column":10},"generated":{"line":49,"column":104}},{"source":"utils.ts","name":null,"original":{"line":39,"column":11},"generated":{"line":49,"column":105}},{"source":"utils.ts","name":null,"original":{"line":39,"column":15},"generated":{"line":49,"column":109}},{"source":"utils.ts","name":null,"original":{"line":39,"column":16},"generated":{"line":49,"column":110}},{"source":"utils.ts","name":null,"original":{"line":39,"column":17},"generated":{"line":49,"column":111}},{"source":"utils.ts","name":null,"original":{"line":39,"column":18},"generated":{"line":49,"column":112}},{"source":"utils.ts","name":null,"original":{"line":39,"column":19},"generated":{"line":49,"column":113}},{"source":"utils.ts","name":null,"original":{"line":39,"column":21},"generated":{"line":49,"column":115}},{"source":"utils.ts","name":null,"original":{"line":39,"column":26},"generated":{"line":49,"column":120}},{"source":"utils.ts","name":null,"original":{"line":39,"column":29},"generated":{"line":49,"column":123}},{"source":"utils.ts","name":null,"original":{"line":41,"column":0},"generated":{"line":50,"column":0}},{"source":"utils.ts","name":null,"original":{"line":41,"column":1},"generated":{"line":50,"column":1}},{"source":"utils.ts","name":null,"original":{"line":32,"column":13},"generated":{"line":51,"column":0}},{"source":"utils.ts","name":null,"original":{"line":32,"column":13},"generated":{"line":51,"column":7}},{"source":"utils.ts","name":null,"original":{"line":32,"column":13},"generated":{"line":51,"column":8}},{"source":"utils.ts","name":null,"original":{"line":32,"column":33},"generated":{"line":51,"column":28}},{"source":"utils.ts","name":null,"original":{"line":32,"column":33},"generated":{"line":51,"column":31}},{"source":"utils.ts","name":null,"original":{"line":32,"column":33},"generated":{"line":51,"column":51}},{"source":"utils.ts","name":null,"original":{"line":43,"column":0},"generated":{"line":52,"column":0}},{"source":"utils.ts","name":null,"original":{"line":50,"column":7},"generated":{"line":59,"column":0}},{"source":"utils.ts","name":null,"original":{"line":50,"column":13},"generated":{"line":59,"column":4}},{"source":"utils.ts","name":null,"original":{"line":50,"column":29},"generated":{"line":59,"column":20}},{"source":"utils.ts","name":null,"original":{"line":50,"column":32},"generated":{"line":59,"column":23}},{"source":"utils.ts","name":null,"original":{"line":50,"column":13},"generated":{"line":59,"column":32}},{"source":"utils.ts","name":null,"original":{"line":50,"column":29},"generated":{"line":59,"column":48}},{"source":"utils.ts","name":null,"original":{"line":51,"column":4},"generated":{"line":59,"column":49}},{"source":"utils.ts","name":null,"original":{"line":51,"column":35},"generated":{"line":59,"column":56}},{"source":"utils.ts","name":null,"original":{"line":52,"column":4},"generated":{"line":59,"column":58}},{"source":"utils.ts","name":null,"original":{"line":52,"column":24},"generated":{"line":59,"column":70}},{"source":"utils.ts","name":null,"original":{"line":53,"column":4},"generated":{"line":59,"column":72}},{"source":"utils.ts","name":null,"original":{"line":53,"column":13},"generated":{"line":59,"column":76}},{"source":"utils.ts","name":null,"original":{"line":54,"column":4},"generated":{"line":59,"column":78}},{"source":"utils.ts","name":null,"original":{"line":55,"column":4},"generated":{"line":60,"column":2}},{"source":"utils.ts","name":null,"original":{"line":55,"column":8},"generated":{"line":60,"column":6}},{"source":"utils.ts","name":null,"original":{"line":55,"column":9},"generated":{"line":60,"column":7}},{"source":"utils.ts","name":null,"original":{"line":55,"column":16},"generated":{"line":60,"column":14}},{"source":"utils.ts","name":null,"original":{"line":55,"column":17},"generated":{"line":60,"column":15}},{"source":"utils.ts","name":null,"original":{"line":55,"column":29},"generated":{"line":60,"column":27}},{"source":"utils.ts","name":null,"original":{"line":55,"column":30},"generated":{"line":60,"column":28}},{"source":"utils.ts","name":null,"original":{"line":55,"column":32},"generated":{"line":60,"column":30}},{"source":"utils.ts","name":null,"original":{"line":56,"column":8},"generated":{"line":61,"column":4}},{"source":"utils.ts","name":null,"original":{"line":56,"column":15},"generated":{"line":61,"column":11}},{"source":"utils.ts","name":null,"original":{"line":56,"column":16},"generated":{"line":61,"column":12}},{"source":"utils.ts","name":null,"original":{"line":56,"column":28},"generated":{"line":61,"column":24}},{"source":"utils.ts","name":null,"original":{"line":56,"column":29},"generated":{"line":61,"column":25}},{"source":"utils.ts","name":null,"original":{"line":56,"column":32},"generated":{"line":61,"column":28}},{"source":"utils.ts","name":null,"original":{"line":56,"column":33},"generated":{"line":61,"column":29}},{"source":"utils.ts","name":null,"original":{"line":56,"column":37},"generated":{"line":61,"column":33}},{"source":"utils.ts","name":null,"original":{"line":56,"column":38},"generated":{"line":61,"column":34}},{"source":"utils.ts","name":null,"original":{"line":57,"column":5},"generated":{"line":62,"column":3}},{"source":"utils.ts","name":null,"original":{"line":57,"column":11},"generated":{"line":62,"column":9}},{"source":"utils.ts","name":null,"original":{"line":58,"column":8},"generated":{"line":63,"column":4}},{"source":"utils.ts","name":null,"original":{"line":59,"column":8},"generated":{"line":64,"column":4}},{"source":"utils.ts","name":null,"original":{"line":60,"column":8},"generated":{"line":65,"column":4}},{"source":"utils.ts","name":null,"original":{"line":61,"column":8},"generated":{"line":66,"column":4}},{"source":"utils.ts","name":null,"original":{"line":62,"column":8},"generated":{"line":67,"column":4}},{"source":"utils.ts","name":null,"original":{"line":63,"column":8},"generated":{"line":68,"column":4}},{"source":"utils.ts","name":null,"original":{"line":63,"column":15},"generated":{"line":68,"column":11}},{"source":"utils.ts","name":null,"original":{"line":63,"column":16},"generated":{"line":68,"column":12}},{"source":"utils.ts","name":null,"original":{"line":63,"column":28},"generated":{"line":68,"column":24}},{"source":"utils.ts","name":null,"original":{"line":63,"column":29},"generated":{"line":68,"column":25}},{"source":"utils.ts","name":null,"original":{"line":63,"column":30},"generated":{"line":68,"column":26}},{"source":"utils.ts","name":null,"original":{"line":63,"column":37},"generated":{"line":68,"column":33}},{"source":"utils.ts","name":null,"original":{"line":63,"column":38},"generated":{"line":68,"column":34}},{"source":"utils.ts","name":null,"original":{"line":63,"column":50},"generated":{"line":68,"column":46}},{"source":"utils.ts","name":null,"original":{"line":63,"column":51},"generated":{"line":68,"column":47}},{"source":"utils.ts","name":null,"original":{"line":63,"column":52},"generated":{"line":68,"column":48}},{"source":"utils.ts","name":null,"original":{"line":63,"column":58},"generated":{"line":68,"column":54}},{"source":"utils.ts","name":null,"original":{"line":63,"column":59},"generated":{"line":68,"column":55}},{"source":"utils.ts","name":null,"original":{"line":63,"column":62},"generated":{"line":68,"column":58}},{"source":"utils.ts","name":null,"original":{"line":63,"column":66},"generated":{"line":68,"column":62}},{"source":"utils.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":70,"column":0}},{"source":"utils.ts","name":null,"original":{"line":65,"column":1},"generated":{"line":70,"column":1}},{"source":"utils.ts","name":null,"original":{"line":50,"column":13},"generated":{"line":71,"column":0}},{"source":"utils.ts","name":null,"original":{"line":50,"column":13},"generated":{"line":71,"column":7}},{"source":"utils.ts","name":null,"original":{"line":50,"column":13},"generated":{"line":71,"column":8}},{"source":"utils.ts","name":null,"original":{"line":50,"column":29},"generated":{"line":71,"column":24}},{"source":"utils.ts","name":null,"original":{"line":50,"column":29},"generated":{"line":71,"column":27}},{"source":"utils.ts","name":null,"original":{"line":50,"column":29},"generated":{"line":71,"column":43}},{"source":"utils.ts","name":null,"original":{"line":67,"column":0},"generated":{"line":72,"column":0}},{"source":"utils.ts","name":null,"original":{"line":77,"column":7},"generated":{"line":82,"column":0}},{"source":"utils.ts","name":null,"original":{"line":77,"column":13},"generated":{"line":82,"column":4}},{"source":"utils.ts","name":null,"original":{"line":77,"column":35},"generated":{"line":82,"column":26}},{"source":"utils.ts","name":null,"original":{"line":77,"column":38},"generated":{"line":82,"column":29}},{"source":"utils.ts","name":null,"original":{"line":77,"column":13},"generated":{"line":82,"column":38}},{"source":"utils.ts","name":null,"original":{"line":77,"column":35},"generated":{"line":82,"column":60}},{"source":"utils.ts","name":null,"original":{"line":78,"column":4},"generated":{"line":82,"column":61}},{"source":"utils.ts","name":null,"original":{"line":78,"column":24},"generated":{"line":82,"column":73}},{"source":"utils.ts","name":null,"original":{"line":79,"column":4},"generated":{"line":82,"column":75}},{"source":"utils.ts","name":null,"original":{"line":79,"column":25},"generated":{"line":82,"column":86}},{"source":"utils.ts","name":null,"original":{"line":80,"column":4},"generated":{"line":82,"column":88}},{"source":"utils.ts","name":null,"original":{"line":80,"column":19},"generated":{"line":82,"column":95}},{"source":"utils.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":82,"column":97}},{"source":"utils.ts","name":null,"original":{"line":81,"column":16},"generated":{"line":82,"column":101}},{"source":"utils.ts","name":null,"original":{"line":82,"column":4},"generated":{"line":82,"column":103}},{"source":"utils.ts","name":null,"original":{"line":82,"column":16},"generated":{"line":82,"column":107}},{"source":"utils.ts","name":null,"original":{"line":83,"column":4},"generated":{"line":82,"column":109}},{"source":"utils.ts","name":null,"original":{"line":83,"column":13},"generated":{"line":82,"column":111}},{"source":"utils.ts","name":null,"original":{"line":83,"column":13},"generated":{"line":82,"column":113}},{"source":"utils.ts","name":null,"original":{"line":85,"column":4},"generated":{"line":83,"column":2}},{"source":"utils.ts","name":null,"original":{"line":86,"column":4},"generated":{"line":84,"column":2}},{"source":"utils.ts","name":null,"original":{"line":86,"column":10},"generated":{"line":84,"column":6}},{"source":"utils.ts","name":null,"original":{"line":86,"column":13},"generated":{"line":84,"column":9}},{"source":"utils.ts","name":null,"original":{"line":86,"column":40},"generated":{"line":84,"column":12}},{"source":"utils.ts","name":null,"original":{"line":86,"column":40},"generated":{"line":84,"column":13}},{"source":"utils.ts","name":null,"original":{"line":86,"column":42},"generated":{"line":84,"column":14}},{"source":"utils.ts","name":null,"original":{"line":88,"column":4},"generated":{"line":85,"column":2}},{"source":"utils.ts","name":null,"original":{"line":89,"column":4},"generated":{"line":86,"column":2}},{"source":"utils.ts","name":null,"original":{"line":89,"column":10},"generated":{"line":86,"column":6}},{"source":"utils.ts","name":null,"original":{"line":89,"column":16},"generated":{"line":86,"column":12}},{"source":"utils.ts","name":null,"original":{"line":89,"column":19},"generated":{"line":86,"column":15}},{"source":"utils.ts","name":null,"original":{"line":89,"column":30},"generated":{"line":86,"column":26}},{"source":"utils.ts","name":null,"original":{"line":89,"column":31},"generated":{"line":86,"column":27}},{"source":"utils.ts","name":null,"original":{"line":89,"column":37},"generated":{"line":86,"column":33}},{"source":"utils.ts","name":null,"original":{"line":89,"column":40},"generated":{"line":86,"column":36}},{"source":"utils.ts","name":null,"original":{"line":89,"column":41},"generated":{"line":86,"column":37}},{"source":"utils.ts","name":null,"original":{"line":90,"column":4},"generated":{"line":87,"column":2}},{"source":"utils.ts","name":null,"original":{"line":90,"column":8},"generated":{"line":87,"column":6}},{"source":"utils.ts","name":null,"original":{"line":90,"column":12},"generated":{"line":87,"column":10}},{"source":"utils.ts","name":null,"original":{"line":90,"column":13},"generated":{"line":87,"column":11}},{"source":"utils.ts","name":null,"original":{"line":90,"column":19},"generated":{"line":87,"column":17}},{"source":"utils.ts","name":null,"original":{"line":90,"column":22},"generated":{"line":87,"column":20}},{"source":"utils.ts","name":null,"original":{"line":90,"column":28},"generated":{"line":87,"column":26}},{"source":"utils.ts","name":null,"original":{"line":90,"column":30},"generated":{"line":87,"column":28}},{"source":"utils.ts","name":null,"original":{"line":91,"column":8},"generated":{"line":88,"column":4}},{"source":"utils.ts","name":null,"original":{"line":91,"column":14},"generated":{"line":88,"column":10}},{"source":"utils.ts","name":null,"original":{"line":91,"column":18},"generated":{"line":88,"column":14}},{"source":"utils.ts","name":null,"original":{"line":91,"column":23},"generated":{"line":88,"column":19}},{"source":"utils.ts","name":null,"original":{"line":92,"column":15},"generated":{"line":88,"column":30}},{"source":"utils.ts","name":null,"original":{"line":92,"column":27},"generated":{"line":88,"column":42}},{"source":"utils.ts","name":null,"original":{"line":92,"column":49},"generated":{"line":88,"column":74}},{"source":"utils.ts","name":null,"original":{"line":92,"column":55},"generated":{"line":88,"column":80}},{"source":"utils.ts","name":null,"original":{"line":92,"column":88},"generated":{"line":88,"column":123}},{"source":"utils.ts","name":null,"original":{"line":92,"column":90},"generated":{"line":88,"column":125}},{"source":"utils.ts","name":null,"original":{"line":92,"column":91},"generated":{"line":88,"column":126}},{"source":"utils.ts","name":null,"original":{"line":92,"column":93},"generated":{"line":88,"column":128}},{"source":"utils.ts","name":null,"original":{"line":92,"column":94},"generated":{"line":88,"column":129}},{"source":"utils.ts","name":null,"original":{"line":92,"column":95},"generated":{"line":88,"column":130}},{"source":"utils.ts","name":null,"original":{"line":93,"column":9},"generated":{"line":88,"column":132}},{"source":"utils.ts","name":null,"original":{"line":96,"column":4},"generated":{"line":90,"column":2}},{"source":"utils.ts","name":null,"original":{"line":96,"column":37},"generated":{"line":90,"column":37}},{"source":"utils.ts","name":null,"original":{"line":96,"column":43},"generated":{"line":90,"column":43}},{"source":"utils.ts","name":null,"original":{"line":96,"column":44},"generated":{"line":90,"column":44}},{"source":"utils.ts","name":null,"original":{"line":96,"column":51},"generated":{"line":90,"column":51}},{"source":"utils.ts","name":null,"original":{"line":96,"column":52},"generated":{"line":90,"column":52}},{"source":"utils.ts","name":null,"original":{"line":96,"column":63},"generated":{"line":90,"column":63}},{"source":"utils.ts","name":null,"original":{"line":96,"column":64},"generated":{"line":90,"column":64}},{"source":"utils.ts","name":null,"original":{"line":96,"column":66},"generated":{"line":90,"column":101}},{"source":"utils.ts","name":null,"original":{"line":96,"column":9},"generated":{"line":91,"column":4}},{"source":"utils.ts","name":null,"original":{"line":96,"column":16},"generated":{"line":92,"column":6}},{"source":"utils.ts","name":null,"original":{"line":96,"column":19},"generated":{"line":92,"column":9}},{"source":"utils.ts","name":null,"original":{"line":96,"column":21},"generated":{"line":93,"column":6}},{"source":"utils.ts","name":null,"original":{"line":96,"column":32},"generated":{"line":93,"column":17}},{"source":"utils.ts","name":null,"original":{"line":97,"column":8},"generated":{"line":94,"column":4}},{"source":"utils.ts","name":null,"original":{"line":97,"column":14},"generated":{"line":94,"column":8}},{"source":"utils.ts","name":null,"original":{"line":97,"column":15},"generated":{"line":94,"column":9}},{"source":"utils.ts","name":null,"original":{"line":97,"column":18},"generated":{"line":94,"column":12}},{"source":"utils.ts","name":null,"original":{"line":97,"column":26},"generated":{"line":94,"column":20}},{"source":"utils.ts","name":null,"original":{"line":97,"column":27},"generated":{"line":94,"column":21}},{"source":"utils.ts","name":null,"original":{"line":97,"column":30},"generated":{"line":94,"column":24}},{"source":"utils.ts","name":null,"original":{"line":97,"column":32},"generated":{"line":94,"column":26}},{"source":"utils.ts","name":null,"original":{"line":97,"column":34},"generated":{"line":94,"column":28}},{"source":"utils.ts","name":null,"original":{"line":97,"column":35},"generated":{"line":94,"column":29}},{"source":"utils.ts","name":null,"original":{"line":99,"column":8},"generated":{"line":95,"column":4}},{"source":"utils.ts","name":null,"original":{"line":99,"column":24},"generated":{"line":95,"column":23}},{"source":"utils.ts","name":null,"original":{"line":99,"column":30},"generated":{"line":95,"column":29}},{"source":"utils.ts","name":null,"original":{"line":99,"column":31},"generated":{"line":95,"column":30}},{"source":"utils.ts","name":null,"original":{"line":99,"column":35},"generated":{"line":95,"column":34}},{"source":"utils.ts","name":null,"original":{"line":99,"column":36},"generated":{"line":95,"column":35}},{"source":"utils.ts","name":null,"original":{"line":99,"column":47},"generated":{"line":95,"column":46}},{"source":"utils.ts","name":null,"original":{"line":99,"column":48},"generated":{"line":95,"column":47}},{"source":"utils.ts","name":null,"original":{"line":99,"column":48},"generated":{"line":96,"column":6}},{"source":"utils.ts","name":null,"original":{"line":99,"column":15},"generated":{"line":97,"column":6}},{"source":"utils.ts","name":null,"original":{"line":99,"column":20},"generated":{"line":97,"column":11}},{"source":"utils.ts","name":null,"original":{"line":100,"column":8},"generated":{"line":98,"column":4}},{"source":"utils.ts","name":null,"original":{"line":100,"column":33},"generated":{"line":98,"column":25}},{"source":"utils.ts","name":null,"original":{"line":100,"column":39},"generated":{"line":98,"column":31}},{"source":"utils.ts","name":null,"original":{"line":100,"column":40},"generated":{"line":98,"column":32}},{"source":"utils.ts","name":null,"original":{"line":100,"column":46},"generated":{"line":98,"column":38}},{"source":"utils.ts","name":null,"original":{"line":100,"column":47},"generated":{"line":98,"column":39}},{"source":"utils.ts","name":null,"original":{"line":100,"column":58},"generated":{"line":98,"column":50}},{"source":"utils.ts","name":null,"original":{"line":100,"column":59},"generated":{"line":98,"column":51}},{"source":"utils.ts","name":null,"original":{"line":100,"column":59},"generated":{"line":99,"column":6}},{"source":"utils.ts","name":null,"original":{"line":100,"column":15},"generated":{"line":100,"column":6}},{"source":"utils.ts","name":null,"original":{"line":100,"column":29},"generated":{"line":100,"column":20}},{"source":"utils.ts","name":null,"original":{"line":101,"column":8},"generated":{"line":101,"column":4}},{"source":"utils.ts","name":null,"original":{"line":101,"column":11},"generated":{"line":101,"column":7}},{"source":"utils.ts","name":null,"original":{"line":101,"column":12},"generated":{"line":101,"column":8}},{"source":"utils.ts","name":null,"original":{"line":101,"column":17},"generated":{"line":101,"column":13}},{"source":"utils.ts","name":null,"original":{"line":101,"column":18},"generated":{"line":101,"column":14}},{"source":"utils.ts","name":null,"original":{"line":101,"column":21},"generated":{"line":101,"column":17}},{"source":"utils.ts","name":null,"original":{"line":101,"column":21},"generated":{"line":101,"column":18}},{"source":"utils.ts","name":null,"original":{"line":101,"column":21},"generated":{"line":101,"column":19}},{"source":"utils.ts","name":null,"original":{"line":101,"column":21},"generated":{"line":101,"column":21}},{"source":"utils.ts","name":null,"original":{"line":101,"column":21},"generated":{"line":101,"column":28}},{"source":"utils.ts","name":null,"original":{"line":101,"column":21},"generated":{"line":101,"column":29}},{"source":"utils.ts","name":null,"original":{"line":101,"column":30},"generated":{"line":101,"column":38}},{"source":"utils.ts","name":null,"original":{"line":101,"column":31},"generated":{"line":101,"column":40}},{"source":"utils.ts","name":null,"original":{"line":101,"column":35},"generated":{"line":101,"column":44}},{"source":"utils.ts","name":null,"original":{"line":101,"column":36},"generated":{"line":101,"column":45}},{"source":"utils.ts","name":null,"original":{"line":101,"column":37},"generated":{"line":101,"column":46}},{"source":"utils.ts","name":null,"original":{"line":101,"column":40},"generated":{"line":101,"column":49}},{"source":"utils.ts","name":null,"original":{"line":101,"column":41},"generated":{"line":101,"column":50}},{"source":"utils.ts","name":null,"original":{"line":101,"column":42},"generated":{"line":101,"column":51}},{"source":"utils.ts","name":null,"original":{"line":101,"column":44},"generated":{"line":101,"column":53}},{"source":"utils.ts","name":null,"original":{"line":101,"column":58},"generated":{"line":101,"column":67}},{"source":"utils.ts","name":null,"original":{"line":101,"column":59},"generated":{"line":101,"column":68}},{"source":"utils.ts","name":null,"original":{"line":104,"column":4},"generated":{"line":103,"column":2}},{"source":"utils.ts","name":null,"original":{"line":104,"column":4},"generated":{"line":103,"column":3}},{"source":"utils.ts","name":null,"original":{"line":104,"column":4},"generated":{"line":103,"column":4}},{"source":"utils.ts","name":null,"original":{"line":104,"column":4},"generated":{"line":103,"column":6}},{"source":"utils.ts","name":null,"original":{"line":104,"column":4},"generated":{"line":103,"column":13}},{"source":"utils.ts","name":null,"original":{"line":104,"column":4},"generated":{"line":103,"column":14}},{"source":"utils.ts","name":null,"original":{"line":104,"column":20},"generated":{"line":103,"column":30}},{"source":"utils.ts","name":null,"original":{"line":104,"column":21},"generated":{"line":103,"column":32}},{"source":"utils.ts","name":null,"original":{"line":104,"column":28},"generated":{"line":103,"column":39}},{"source":"utils.ts","name":null,"original":{"line":104,"column":30},"generated":{"line":103,"column":41}},{"source":"utils.ts","name":null,"original":{"line":104,"column":42},"generated":{"line":103,"column":53}},{"source":"utils.ts","name":null,"original":{"line":104,"column":44},"generated":{"line":103,"column":55}},{"source":"utils.ts","name":null,"original":{"line":104,"column":47},"generated":{"line":103,"column":58}},{"source":"utils.ts","name":null,"original":{"line":104,"column":48},"generated":{"line":103,"column":59}},{"source":"utils.ts","name":null,"original":{"line":105,"column":0},"generated":{"line":104,"column":0}},{"source":"utils.ts","name":null,"original":{"line":105,"column":1},"generated":{"line":104,"column":1}},{"source":"utils.ts","name":null,"original":{"line":77,"column":13},"generated":{"line":105,"column":0}},{"source":"utils.ts","name":null,"original":{"line":77,"column":13},"generated":{"line":105,"column":7}},{"source":"utils.ts","name":null,"original":{"line":77,"column":13},"generated":{"line":105,"column":8}},{"source":"utils.ts","name":null,"original":{"line":77,"column":35},"generated":{"line":105,"column":30}},{"source":"utils.ts","name":null,"original":{"line":77,"column":35},"generated":{"line":105,"column":33}},{"source":"utils.ts","name":null,"original":{"line":77,"column":35},"generated":{"line":105,"column":55}},{"source":"utils.ts","name":null,"original":{"line":107,"column":0},"generated":{"line":106,"column":0}},{"source":"utils.ts","name":null,"original":{"line":113,"column":7},"generated":{"line":112,"column":0}},{"source":"utils.ts","name":null,"original":{"line":113,"column":13},"generated":{"line":112,"column":4}},{"source":"utils.ts","name":null,"original":{"line":113,"column":21},"generated":{"line":112,"column":12}},{"source":"utils.ts","name":null,"original":{"line":113,"column":24},"generated":{"line":112,"column":15}},{"source":"utils.ts","name":null,"original":{"line":113,"column":13},"generated":{"line":112,"column":24}},{"source":"utils.ts","name":null,"original":{"line":113,"column":21},"generated":{"line":112,"column":32}},{"source":"utils.ts","name":null,"original":{"line":113,"column":34},"generated":{"line":112,"column":33}},{"source":"utils.ts","name":null,"original":{"line":113,"column":46},"generated":{"line":112,"column":37}},{"source":"utils.ts","name":null,"original":{"line":113,"column":46},"generated":{"line":112,"column":39}},{"source":"utils.ts","name":null,"original":{"line":114,"column":4},"generated":{"line":113,"column":2}},{"source":"utils.ts","name":null,"original":{"line":114,"column":10},"generated":{"line":113,"column":6}},{"source":"utils.ts","name":null,"original":{"line":114,"column":15},"generated":{"line":113,"column":11}},{"source":"utils.ts","name":null,"original":{"line":115,"column":8},"generated":{"line":113,"column":14}},{"source":"utils.ts","name":null,"original":{"line":115,"column":76},"generated":{"line":113,"column":82}},{"source":"utils.ts","name":null,"original":{"line":116,"column":4},"generated":{"line":114,"column":2}},{"source":"utils.ts","name":null,"original":{"line":116,"column":11},"generated":{"line":114,"column":9}},{"source":"utils.ts","name":null,"original":{"line":116,"column":15},"generated":{"line":114,"column":13}},{"source":"utils.ts","name":null,"original":{"line":116,"column":21},"generated":{"line":114,"column":19}},{"source":"utils.ts","name":null,"original":{"line":116,"column":26},"generated":{"line":114,"column":31}},{"source":"utils.ts","name":null,"original":{"line":116,"column":31},"generated":{"line":114,"column":36}},{"source":"utils.ts","name":null,"original":{"line":116,"column":36},"generated":{"line":114,"column":44}},{"source":"utils.ts","name":null,"original":{"line":116,"column":40},"generated":{"line":114,"column":48}},{"source":"utils.ts","name":null,"original":{"line":116,"column":41},"generated":{"line":114,"column":49}},{"source":"utils.ts","name":null,"original":{"line":116,"column":42},"generated":{"line":114,"column":50}},{"source":"utils.ts","name":null,"original":{"line":116,"column":46},"generated":{"line":114,"column":54}},{"source":"utils.ts","name":null,"original":{"line":116,"column":47},"generated":{"line":114,"column":55}},{"source":"utils.ts","name":null,"original":{"line":116,"column":51},"generated":{"line":114,"column":59}},{"source":"utils.ts","name":null,"original":{"line":116,"column":52},"generated":{"line":114,"column":60}},{"source":"utils.ts","name":null,"original":{"line":117,"column":0},"generated":{"line":115,"column":0}},{"source":"utils.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":115,"column":1}},{"source":"utils.ts","name":null,"original":{"line":113,"column":13},"generated":{"line":116,"column":0}},{"source":"utils.ts","name":null,"original":{"line":113,"column":13},"generated":{"line":116,"column":7}},{"source":"utils.ts","name":null,"original":{"line":113,"column":13},"generated":{"line":116,"column":8}},{"source":"utils.ts","name":null,"original":{"line":113,"column":21},"generated":{"line":116,"column":16}},{"source":"utils.ts","name":null,"original":{"line":113,"column":21},"generated":{"line":116,"column":19}},{"source":"utils.ts","name":null,"original":{"line":113,"column":21},"generated":{"line":116,"column":27}},{"source":"utils.ts","name":null,"original":{"line":119,"column":0},"generated":{"line":117,"column":0}},{"source":"utils.ts","name":null,"original":{"line":120,"column":7},"generated":{"line":118,"column":0}},{"source":"utils.ts","name":null,"original":{"line":120,"column":13},"generated":{"line":118,"column":4}},{"source":"utils.ts","name":null,"original":{"line":120,"column":19},"generated":{"line":118,"column":10}},{"source":"utils.ts","name":null,"original":{"line":120,"column":19},"generated":{"line":119,"column":2}},{"source":"utils.ts","name":null,"original":{"line":120,"column":22},"generated":{"line":119,"column":72}},{"source":"utils.ts","name":null,"original":{"line":120,"column":29},"generated":{"line":119,"column":89}},{"source":"utils.ts","name":null,"original":{"line":120,"column":46},"generated":{"line":119,"column":98}},{"source":"utils.ts","name":null,"original":{"line":120,"column":46},"generated":{"line":120,"column":4}},{"source":"utils.ts","name":null,"original":{"line":120,"column":46},"generated":{"line":121,"column":4}},{"source":"utils.ts","name":null,"original":{"line":120,"column":46},"generated":{"line":122,"column":6}},{"source":"utils.ts","name":null,"original":{"line":120,"column":46},"generated":{"line":123,"column":8}},{"source":"utils.ts","name":null,"original":{"line":120,"column":46},"generated":{"line":124,"column":10}},{"source":"utils.ts","name":null,"original":{"line":120,"column":46},"generated":{"line":125,"column":10}},{"source":"utils.ts","name":null,"original":{"line":142,"column":23},"generated":{"line":125,"column":17}},{"source":"utils.ts","name":null,"original":{"line":142,"column":23},"generated":{"line":125,"column":25}},{"source":"utils.ts","name":null,"original":{"line":142,"column":23},"generated":{"line":125,"column":26}},{"source":"utils.ts","name":null,"original":{"line":142,"column":32},"generated":{"line":125,"column":35}},{"source":"utils.ts","name":null,"original":{"line":142,"column":33},"generated":{"line":125,"column":36}},{"source":"utils.ts","name":null,"original":{"line":142,"column":39},"generated":{"line":125,"column":42}},{"source":"utils.ts","name":null,"original":{"line":142,"column":40},"generated":{"line":125,"column":43}},{"source":"utils.ts","name":null,"original":{"line":142,"column":46},"generated":{"line":125,"column":49}},{"source":"utils.ts","name":null,"original":{"line":142,"column":47},"generated":{"line":125,"column":50}},{"source":"utils.ts","name":null,"original":{"line":142,"column":56},"generated":{"line":125,"column":59}},{"source":"utils.ts","name":null,"original":{"line":142,"column":58},"generated":{"line":125,"column":61}},{"source":"utils.ts","name":null,"original":{"line":142,"column":67},"generated":{"line":125,"column":70}},{"source":"utils.ts","name":null,"original":{"line":142,"column":68},"generated":{"line":125,"column":71}},{"source":"utils.ts","name":null,"original":{"line":142,"column":68},"generated":{"line":126,"column":8}},{"source":"utils.ts","name":null,"original":{"line":142,"column":10},"generated":{"line":127,"column":10}},{"source":"utils.ts","name":null,"original":{"line":142,"column":14},"generated":{"line":127,"column":14}},{"source":"utils.ts","name":null,"original":{"line":142,"column":14},"generated":{"line":128,"column":10}},{"source":"utils.ts","name":null,"original":{"line":143,"column":11},"generated":{"line":128,"column":43}},{"source":"utils.ts","name":null,"original":{"line":143,"column":17},"generated":{"line":128,"column":49}},{"source":"utils.ts","name":null,"original":{"line":143,"column":18},"generated":{"line":128,"column":50}},{"source":"utils.ts","name":null,"original":{"line":143,"column":22},"generated":{"line":128,"column":54}},{"source":"utils.ts","name":null,"original":{"line":143,"column":23},"generated":{"line":128,"column":55}},{"source":"utils.ts","name":null,"original":{"line":143,"column":27},"generated":{"line":128,"column":59}},{"source":"utils.ts","name":null,"original":{"line":143,"column":28},"generated":{"line":128,"column":60}},{"source":"utils.ts","name":null,"original":{"line":143,"column":28},"generated":{"line":129,"column":8}},{"source":"utils.ts","name":null,"original":{"line":143,"column":28},"generated":{"line":130,"column":8}},{"source":"utils.ts","name":null,"original":{"line":143,"column":28},"generated":{"line":131,"column":10}},{"source":"utils.ts","name":null,"original":{"line":143,"column":28},"generated":{"line":132,"column":6}},{"source":"utils.ts","name":null,"original":{"line":143,"column":28},"generated":{"line":133,"column":4}},{"source":"utils.ts","name":null,"original":{"line":143,"column":28},"generated":{"line":134,"column":2}},{"source":"utils.ts","name":null,"original":{"line":144,"column":1},"generated":{"line":134,"column":3}},{"source":"utils.ts","name":null,"original":{"line":144,"column":1},"generated":{"line":135,"column":2}},{"source":"utils.ts","name":null,"original":{"line":120,"column":13},"generated":{"line":135,"column":18}},{"source":"utils.ts","name":null,"original":{"line":120,"column":19},"generated":{"line":135,"column":24}},{"source":"utils.ts","name":null,"original":{"line":120,"column":19},"generated":{"line":136,"column":4}},{"source":"utils.ts","name":null,"original":{"line":120,"column":19},"generated":{"line":137,"column":2}},{"source":"utils.ts","name":null,"original":{"line":120,"column":19},"generated":{"line":138,"column":0}},{"source":"utils.ts","name":null,"original":{"line":144,"column":1},"generated":{"line":138,"column":3}},{"source":"utils.ts","name":null,"original":{"line":120,"column":13},"generated":{"line":139,"column":0}},{"source":"utils.ts","name":null,"original":{"line":120,"column":13},"generated":{"line":139,"column":7}},{"source":"utils.ts","name":null,"original":{"line":120,"column":13},"generated":{"line":139,"column":8}},{"source":"utils.ts","name":null,"original":{"line":120,"column":19},"generated":{"line":139,"column":14}},{"source":"utils.ts","name":null,"original":{"line":120,"column":19},"generated":{"line":139,"column":17}},{"source":"utils.ts","name":null,"original":{"line":120,"column":19},"generated":{"line":139,"column":23}}],"sources":{"utils.ts":"import { webcrypto } from 'crypto'\nimport { BobTx, Cell, Tape } from '../types/common'\n/**\n * returns the BOB cell value for a given encoding\n *\n * @param pushData\n * @param schemaEncoding\n * @returns {string|number}\n */\nexport const cellValue = function (pushData: Cell, schemaEncoding: string) {\n    if (!pushData) {\n        throw new Error(`cannot get cell value of: ${pushData}`)\n    } else if (schemaEncoding === 'string') {\n        return pushData['s'] ? pushData.s : pushData.ls\n    } else if (schemaEncoding === 'hex') {\n        return pushData['h'] ? pushData.h : pushData.lh\n    } else if (schemaEncoding === 'number') {\n        return parseInt(pushData['h'] ? pushData.h : pushData.lh || '0', 16)\n    } else if (schemaEncoding === 'file') {\n        return `bitfs://${pushData['f'] ? pushData.f : pushData.lf}`\n    }\n\n    return pushData['b'] ? pushData.b : pushData.lb\n}\n\n/**\n * Check a cell starts with OP_FALSE OP_RETURN -or- OP_RETURN\n *\n * @param cc\n * @returns {boolean}\n */\nexport const checkOpFalseOpReturn = function (cc: Tape) {\n    return (\n        (cc.cell[0] &&\n            cc.cell[1] &&\n            cc.cell[0].op === 0 &&\n            cc.cell[1].op &&\n            cc.cell[1].op === 106) ||\n        cc.cell[0].op === 106\n    )\n}\n\n/**\n * Helper function to store protocol data\n *\n * @param dataObj\n * @param protocolName\n * @param data\n */\nexport const saveProtocolData = (\n    dataObj: { [key: string]: any },\n    protocolName: string,\n    data: any\n) => {\n    if (!dataObj[protocolName]) {\n        dataObj[protocolName] = [data]\n    } else {\n        // if (!Array.isArray(dataObj[protocolName])) {\n        //     const prevData = dataObj[protocolName]\n        //     dataObj[protocolName] = []\n        //     dataObj[protocolName][0] = prevData\n        // }\n        dataObj[protocolName][dataObj[protocolName].length] = data\n    }\n}\n\n/**\n * BMAP default handler to work with query schema's\n *\n * @param querySchema\n * @param protocolName\n * @param dataObj\n * @param cell\n * @param tape\n * @param tx\n */\nexport const bmapQuerySchemaHandler = function (\n    protocolName: string,\n    querySchema: Object[],\n    dataObj: Object,\n    cell: Cell[],\n    tape: Tape[],\n    tx: BobTx\n) {\n    // loop over the schema\n    const obj: { [key: string]: any } = {}\n\n    // Does not have the required number of fields\n    const length = querySchema.length + 1\n    if (cell.length < length) {\n        throw new Error(\n            `${protocolName} requires at least ${length} fields including the prefix: ${tx.tx.h}`\n        )\n    }\n\n    for (const [idx, schemaField] of Object.entries(querySchema)) {\n        const x = parseInt(idx, 10)\n\n        const [field] = Object.keys(schemaField)\n        const [schemaEncoding] = Object.values(schemaField)\n        obj[field] = cellValue(cell[x + 1], schemaEncoding)\n    }\n\n    saveProtocolData(dataObj, protocolName, obj)\n}\n\n/**\n * Check whether the given data is base64\n *\n * @param data\n * @returns {boolean}\n */\nexport const isBase64 = function (data: string) {\n    const regex =\n        '(?:[A-Za-z0-9+\\\\/]{4})*(?:[A-Za-z0-9+\\\\/]{2}==|[A-Za-z0-9+/]{3}=)?'\n    return new RegExp(`^${regex}$`, 'gi').test(data)\n}\n\n// hashes a message buffer, returns the hash as a buffer\nexport const sha256 = async (msgBuffer: Buffer) => {\n    // what mbn was doing\n    // $.checkArgument(Buffer.isBuffer(buf))\n    // return crypto.createHash('sha256').update(buf).digest()\n    // and from there...\n    // createHash('sha256').update(buf).digest()\n\n    // original call from bmap\n    // bsv.crypto.Hash.sha256(Buffer.from(dataBuffer.toString('hex'))).toString('hex');\n\n    // Convert Buffer to ArrayBuffer\n    // let ab = msgBuffer.buffer.slice(\n    //     msgBuffer.byteOffset,\n    //     msgBuffer.byteOffset + msgBuffer.byteLength\n    // )\n\n    // const hashBuffer = await webcrypto.subtle.digest(\n    //     'SHA-256',\n    //     Buffer.from(msgBuffer.toString('hex'))\n    // )\n\n    // final?\n    const hash = await webcrypto.subtle.digest('SHA-256', msgBuffer)\n    return Buffer.from(hash)\n}\n"},"lineCount":null}},"error":null,"hash":"f225a44a34511fce9f14b7553f2eee6f","cacheData":{"env":{}}}