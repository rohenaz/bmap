{"id":"protocols/bitkey.ts","dependencies":[{"name":"D:\\code\\bmap\\tsconfig.json","includedInParent":true,"mtime":1672327029018},{"name":"D:\\code\\bmap\\package.json","includedInParent":true,"mtime":1672329680010},{"name":"@ts-bitcoin/core","loc":{"line":4,"column":23,"index":128},"parent":"D:\\code\\bmap\\src\\protocols\\bitkey.ts","resolved":"D:\\code\\bmap\\node_modules\\@ts-bitcoin\\core\\lib\\bundle.esm.js"},{"name":"../utils","loc":{"line":5,"column":24,"index":174},"parent":"D:\\code\\bmap\\src\\protocols\\bitkey.ts","resolved":"D:\\code\\bmap\\src\\utils.ts"},{"name":"buffer","parent":"D:\\code\\bmap\\src\\protocols\\bitkey.ts","resolved":"D:\\code\\bmap\\node_modules\\buffer\\index.js"}],"generated":{"js":"var define;\nvar Buffer = require(\"buffer\").Buffer;\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BITKEY = void 0;\nvar core_1 = require(\"@ts-bitcoin/core\");\nvar utils_1 = require(\"../utils\");\nvar address = '13SrNDkVzY5bHBRKNu5iXTQ7K7VqTh5tJC';\nvar querySchema = [{\n  bitkey_signature: 'string'\n}, {\n  user_signature: 'string'\n}, {\n  paymail: 'string'\n}, {\n  pubkey: 'string'\n}];\n// const handler = function (dataObj, cell, tape, tx) {\n// https://bitkey.network/how\nvar handler = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n    var dataObj, cell, bitkeyObj, _i, _Object$entries, _Object$entries$_i, idx, schemaField, x, bitkeyField, schemaEncoding, userAddress, paymailHex, pubkeyHex, concatenated, bitkeySignatureBuffer, bitkeySignatureVerified, userSignatureVerified;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          dataObj = _ref.dataObj, cell = _ref.cell;\n          if (cell.length) {\n            _context.next = 3;\n            break;\n          }\n          throw new Error('Invalid Bitkey tx');\n        case 3:\n          console.log('cell length', cell.length);\n          bitkeyObj = {}; // loop over the schema\n          for (_i = 0, _Object$entries = Object.entries(querySchema); _i < _Object$entries.length; _i++) {\n            _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), idx = _Object$entries$_i[0], schemaField = _Object$entries$_i[1];\n            x = parseInt(idx, 10);\n            bitkeyField = Object.keys(schemaField)[0];\n            schemaEncoding = Object.values(schemaField)[0];\n            bitkeyObj[bitkeyField] = (0, utils_1.cellValue)(cell[x + 1], schemaEncoding);\n          }\n          userAddress = core_1.Address.fromPubKey(core_1.PubKey.fromString(bitkeyObj.pubkey)).toString(); // sha256( hex(paymail(USER)) | hex(pubkey(USER)) )\n          paymailHex = Buffer.from(bitkeyObj.paymail).toString('hex');\n          pubkeyHex = Buffer.from(bitkeyObj.pubkey).toString('hex');\n          concatenated = paymailHex + pubkeyHex;\n          _context.next = 12;\n          return (0, utils_1.sha256)(Buffer.from(concatenated, 'hex'));\n        case 12:\n          bitkeySignatureBuffer = _context.sent;\n          bitkeySignatureVerified = core_1.Bsm.verify(bitkeySignatureBuffer, bitkeyObj.bitkey_signature, core_1.Address.fromString('13SrNDkVzY5bHBRKNu5iXTQ7K7VqTh5tJC'));\n          userSignatureVerified = core_1.Bsm.verify(Buffer.from(bitkeyObj.pubkey), bitkeyObj.user_signature, core_1.Address.fromString(userAddress));\n          bitkeyObj.verified = bitkeySignatureVerified && userSignatureVerified;\n          (0, utils_1.saveProtocolData)(dataObj, 'BITKEY', bitkeyObj);\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function handler(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexports.BITKEY = {\n  name: 'BITKEY',\n  address: address,\n  querySchema: querySchema,\n  handler: handler\n};"},"sourceMaps":{"js":{"mappings":[{"source":"protocols/bitkey.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":19,"column":0}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":19,"column":4}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":19,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":19,"column":13}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":19,"column":20}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":19,"column":21}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":19,"column":39}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":19,"column":40}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":20,"column":0}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":20,"column":4}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":20,"column":11}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":20,"column":14}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":20,"column":21}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":20,"column":22}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":20,"column":32}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":20,"column":33}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":21,"column":0}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":5,"column":6},"generated":{"line":21,"column":4}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":5,"column":13},"generated":{"line":21,"column":11}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":5,"column":16},"generated":{"line":21,"column":14}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":5,"column":52},"generated":{"line":21,"column":50}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":22,"column":0}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":7,"column":6},"generated":{"line":22,"column":4}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":7,"column":17},"generated":{"line":22,"column":15}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":7,"column":20},"generated":{"line":22,"column":18}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":8,"column":4},"generated":{"line":22,"column":19}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":8,"column":6},"generated":{"line":23,"column":2}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":8,"column":22},"generated":{"line":23,"column":18}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":8,"column":24},"generated":{"line":23,"column":20}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":8,"column":32},"generated":{"line":24,"column":0}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":8,"column":34},"generated":{"line":24,"column":1}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":9,"column":4},"generated":{"line":24,"column":3}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":9,"column":6},"generated":{"line":25,"column":2}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":9,"column":20},"generated":{"line":25,"column":16}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":9,"column":22},"generated":{"line":25,"column":18}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":9,"column":30},"generated":{"line":26,"column":0}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":9,"column":32},"generated":{"line":26,"column":1}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":26,"column":3}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":10,"column":6},"generated":{"line":27,"column":2}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":10,"column":13},"generated":{"line":27,"column":9}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":10,"column":15},"generated":{"line":27,"column":11}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":10,"column":23},"generated":{"line":28,"column":0}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":10,"column":25},"generated":{"line":28,"column":1}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":11,"column":4},"generated":{"line":28,"column":3}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":11,"column":6},"generated":{"line":29,"column":2}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":11,"column":12},"generated":{"line":29,"column":8}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":11,"column":14},"generated":{"line":29,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":11,"column":22},"generated":{"line":30,"column":0}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":11,"column":24},"generated":{"line":30,"column":1}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":12,"column":1},"generated":{"line":30,"column":2}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":31,"column":0}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":32,"column":0}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":33,"column":0}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":6},"generated":{"line":33,"column":4}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":13},"generated":{"line":33,"column":11}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":13},"generated":{"line":34,"column":2}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":16},"generated":{"line":34,"column":73}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":16},"generated":{"line":35,"column":4}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":16},"generated":{"line":36,"column":4}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":16},"generated":{"line":37,"column":6}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":16},"generated":{"line":38,"column":8}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":25},"generated":{"line":39,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":32},"generated":{"line":39,"column":17}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":25},"generated":{"line":39,"column":25}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":32},"generated":{"line":39,"column":32}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":34},"generated":{"line":39,"column":34}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":38},"generated":{"line":39,"column":38}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":34},"generated":{"line":39,"column":46}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":38},"generated":{"line":39,"column":50}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":38},"generated":{"line":40,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":17,"column":9},"generated":{"line":40,"column":14}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":17,"column":13},"generated":{"line":40,"column":18}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":17,"column":14},"generated":{"line":40,"column":19}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":17,"column":20},"generated":{"line":40,"column":25}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":17,"column":20},"generated":{"line":41,"column":12}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":17,"column":20},"generated":{"line":42,"column":12}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":17,"column":20},"generated":{"line":43,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":17,"column":20},"generated":{"line":44,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":18,"column":14},"generated":{"line":44,"column":16}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":18,"column":18},"generated":{"line":44,"column":20}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":18,"column":23},"generated":{"line":44,"column":25}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":18,"column":24},"generated":{"line":44,"column":26}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":18,"column":43},"generated":{"line":44,"column":45}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":18,"column":44},"generated":{"line":44,"column":46}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":18,"column":44},"generated":{"line":45,"column":8}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":21,"column":4},"generated":{"line":46,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":21,"column":11},"generated":{"line":46,"column":17}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":21,"column":12},"generated":{"line":46,"column":18}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":21,"column":15},"generated":{"line":46,"column":21}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":21,"column":16},"generated":{"line":46,"column":22}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":46,"column":35}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":21,"column":31},"generated":{"line":46,"column":37}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":21,"column":35},"generated":{"line":46,"column":41}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":21,"column":36},"generated":{"line":46,"column":42}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":46,"column":48}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":21,"column":43},"generated":{"line":46,"column":49}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":22,"column":10},"generated":{"line":47,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":22,"column":19},"generated":{"line":47,"column":19}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":22,"column":59},"generated":{"line":47,"column":22}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":22,"column":59},"generated":{"line":47,"column":23}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":22,"column":61},"generated":{"line":47,"column":24}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":24,"column":4},"generated":{"line":47,"column":26}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":25,"column":4},"generated":{"line":48,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":25,"column":37},"generated":{"line":48,"column":41}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":25,"column":43},"generated":{"line":48,"column":47}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":25,"column":44},"generated":{"line":48,"column":48}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":25,"column":51},"generated":{"line":48,"column":55}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":25,"column":52},"generated":{"line":48,"column":56}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":25,"column":63},"generated":{"line":48,"column":67}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":25,"column":64},"generated":{"line":48,"column":68}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":25,"column":66},"generated":{"line":48,"column":105}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":25,"column":66},"generated":{"line":49,"column":12}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":25,"column":16},"generated":{"line":49,"column":73}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":25,"column":19},"generated":{"line":49,"column":76}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":25,"column":21},"generated":{"line":49,"column":102}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":25,"column":32},"generated":{"line":49,"column":113}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":26,"column":14},"generated":{"line":50,"column":12}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":26,"column":15},"generated":{"line":50,"column":13}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":26,"column":18},"generated":{"line":50,"column":16}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":26,"column":26},"generated":{"line":50,"column":24}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":26,"column":27},"generated":{"line":50,"column":25}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":26,"column":30},"generated":{"line":50,"column":28}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":26,"column":32},"generated":{"line":50,"column":30}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":26,"column":34},"generated":{"line":50,"column":32}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":26,"column":35},"generated":{"line":50,"column":33}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":27,"column":14},"generated":{"line":51,"column":12}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":27,"column":25},"generated":{"line":51,"column":23}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":27,"column":28},"generated":{"line":51,"column":26}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":27,"column":34},"generated":{"line":51,"column":32}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":27,"column":35},"generated":{"line":51,"column":33}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":27,"column":39},"generated":{"line":51,"column":37}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":27,"column":40},"generated":{"line":51,"column":38}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":27,"column":51},"generated":{"line":51,"column":49}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":27,"column":52},"generated":{"line":51,"column":50}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":27,"column":53},"generated":{"line":51,"column":51}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":27,"column":54},"generated":{"line":51,"column":52}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":27,"column":55},"generated":{"line":51,"column":53}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":28,"column":14},"generated":{"line":52,"column":12}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":28,"column":28},"generated":{"line":52,"column":26}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":28,"column":31},"generated":{"line":52,"column":29}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":28,"column":37},"generated":{"line":52,"column":35}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":28,"column":38},"generated":{"line":52,"column":36}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":28,"column":44},"generated":{"line":52,"column":42}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":28,"column":45},"generated":{"line":52,"column":43}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":28,"column":56},"generated":{"line":52,"column":54}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":28,"column":57},"generated":{"line":52,"column":55}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":28,"column":58},"generated":{"line":52,"column":56}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":28,"column":59},"generated":{"line":52,"column":57}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":28,"column":60},"generated":{"line":52,"column":58}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":29,"column":8},"generated":{"line":53,"column":12}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":29,"column":17},"generated":{"line":53,"column":21}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":29,"column":18},"generated":{"line":53,"column":22}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":29,"column":29},"generated":{"line":53,"column":33}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":29,"column":30},"generated":{"line":53,"column":34}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":29,"column":33},"generated":{"line":53,"column":37}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":29,"column":33},"generated":{"line":53,"column":38}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":29,"column":33},"generated":{"line":53,"column":39}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":29,"column":33},"generated":{"line":53,"column":41}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":29,"column":33},"generated":{"line":53,"column":48}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":29,"column":33},"generated":{"line":53,"column":49}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":29,"column":42},"generated":{"line":53,"column":58}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":30,"column":12},"generated":{"line":53,"column":60}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":30,"column":16},"generated":{"line":53,"column":64}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":30,"column":17},"generated":{"line":53,"column":65}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":30,"column":18},"generated":{"line":53,"column":66}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":30,"column":21},"generated":{"line":53,"column":69}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":30,"column":22},"generated":{"line":53,"column":70}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":30,"column":23},"generated":{"line":53,"column":71}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":31,"column":12},"generated":{"line":53,"column":73}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":31,"column":26},"generated":{"line":53,"column":87}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":32,"column":19},"generated":{"line":53,"column":88}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":35,"column":10},"generated":{"line":55,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":35,"column":21},"generated":{"line":55,"column":21}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":35,"column":24},"generated":{"line":55,"column":24}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":35,"column":24},"generated":{"line":55,"column":30}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":35,"column":24},"generated":{"line":55,"column":31}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":35,"column":31},"generated":{"line":55,"column":38}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":35,"column":32},"generated":{"line":55,"column":39}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":35,"column":42},"generated":{"line":55,"column":49}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":36,"column":8},"generated":{"line":55,"column":50}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":36,"column":8},"generated":{"line":55,"column":56}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":36,"column":8},"generated":{"line":55,"column":57}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":36,"column":14},"generated":{"line":55,"column":63}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":36,"column":15},"generated":{"line":55,"column":64}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":36,"column":25},"generated":{"line":55,"column":74}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":36,"column":26},"generated":{"line":55,"column":75}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":36,"column":35},"generated":{"line":55,"column":84}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":36,"column":36},"generated":{"line":55,"column":85}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":36,"column":52},"generated":{"line":55,"column":91}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":36,"column":53},"generated":{"line":55,"column":92}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":37,"column":5},"generated":{"line":55,"column":93}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":37,"column":6},"generated":{"line":55,"column":94}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":37,"column":14},"generated":{"line":55,"column":102}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":37,"column":16},"generated":{"line":55,"column":104}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":39,"column":4},"generated":{"line":55,"column":106}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":40,"column":10},"generated":{"line":56,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":40,"column":20},"generated":{"line":56,"column":20}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":40,"column":23},"generated":{"line":56,"column":23}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":40,"column":29},"generated":{"line":56,"column":29}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":40,"column":30},"generated":{"line":56,"column":30}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":40,"column":34},"generated":{"line":56,"column":34}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":40,"column":35},"generated":{"line":56,"column":35}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":40,"column":44},"generated":{"line":56,"column":44}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":40,"column":45},"generated":{"line":56,"column":45}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":40,"column":62},"generated":{"line":56,"column":52}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":40,"column":63},"generated":{"line":56,"column":53}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":40,"column":64},"generated":{"line":56,"column":54}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":40,"column":72},"generated":{"line":56,"column":62}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":40,"column":73},"generated":{"line":56,"column":63}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":40,"column":78},"generated":{"line":56,"column":68}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":40,"column":79},"generated":{"line":56,"column":69}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":41,"column":10},"generated":{"line":57,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":41,"column":19},"generated":{"line":57,"column":19}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":41,"column":22},"generated":{"line":57,"column":22}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":41,"column":28},"generated":{"line":57,"column":28}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":41,"column":29},"generated":{"line":57,"column":29}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":41,"column":33},"generated":{"line":57,"column":33}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":41,"column":34},"generated":{"line":57,"column":34}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":41,"column":43},"generated":{"line":57,"column":43}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":41,"column":44},"generated":{"line":57,"column":44}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":41,"column":60},"generated":{"line":57,"column":50}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":41,"column":61},"generated":{"line":57,"column":51}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":41,"column":62},"generated":{"line":57,"column":52}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":41,"column":70},"generated":{"line":57,"column":60}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":41,"column":71},"generated":{"line":57,"column":61}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":41,"column":76},"generated":{"line":57,"column":66}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":41,"column":77},"generated":{"line":57,"column":67}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":42,"column":10},"generated":{"line":58,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":42,"column":22},"generated":{"line":58,"column":22}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":42,"column":25},"generated":{"line":58,"column":25}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":42,"column":35},"generated":{"line":58,"column":35}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":42,"column":38},"generated":{"line":58,"column":38}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":42,"column":47},"generated":{"line":58,"column":47}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":42,"column":47},"generated":{"line":59,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":42,"column":47},"generated":{"line":60,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":40},"generated":{"line":60,"column":17}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":40},"generated":{"line":60,"column":18}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":40},"generated":{"line":60,"column":19}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":40},"generated":{"line":60,"column":21}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":40},"generated":{"line":60,"column":28}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":40},"generated":{"line":60,"column":29}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":46},"generated":{"line":60,"column":35}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":47},"generated":{"line":60,"column":37}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":53},"generated":{"line":60,"column":43}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":54},"generated":{"line":60,"column":44}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":58},"generated":{"line":60,"column":48}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":59},"generated":{"line":60,"column":49}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":71},"generated":{"line":60,"column":61}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":73},"generated":{"line":60,"column":63}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":78},"generated":{"line":60,"column":68}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":79},"generated":{"line":60,"column":69}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":80},"generated":{"line":60,"column":70}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":80},"generated":{"line":61,"column":8}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":10},"generated":{"line":62,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":43,"column":31},"generated":{"line":62,"column":31}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":45,"column":10},"generated":{"line":63,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":45,"column":33},"generated":{"line":63,"column":33}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":45,"column":36},"generated":{"line":63,"column":36}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":45,"column":36},"generated":{"line":63,"column":42}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":45,"column":36},"generated":{"line":63,"column":43}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":45,"column":39},"generated":{"line":63,"column":46}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":45,"column":40},"generated":{"line":63,"column":47}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":45,"column":46},"generated":{"line":63,"column":53}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":46,"column":8},"generated":{"line":63,"column":54}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":46,"column":29},"generated":{"line":63,"column":75}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":47,"column":8},"generated":{"line":63,"column":77}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":47,"column":17},"generated":{"line":63,"column":86}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":47,"column":18},"generated":{"line":63,"column":87}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":47,"column":44},"generated":{"line":63,"column":103}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":48,"column":8},"generated":{"line":63,"column":105}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":48,"column":8},"generated":{"line":63,"column":111}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":48,"column":8},"generated":{"line":63,"column":112}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":48,"column":15},"generated":{"line":63,"column":119}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":48,"column":16},"generated":{"line":63,"column":120}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":48,"column":26},"generated":{"line":63,"column":130}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":48,"column":27},"generated":{"line":63,"column":131}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":48,"column":63},"generated":{"line":63,"column":167}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":48,"column":64},"generated":{"line":63,"column":168}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":49,"column":5},"generated":{"line":63,"column":169}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":50,"column":10},"generated":{"line":64,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":50,"column":31},"generated":{"line":64,"column":31}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":50,"column":34},"generated":{"line":64,"column":34}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":50,"column":34},"generated":{"line":64,"column":40}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":50,"column":34},"generated":{"line":64,"column":41}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":50,"column":37},"generated":{"line":64,"column":44}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":50,"column":38},"generated":{"line":64,"column":45}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":50,"column":44},"generated":{"line":64,"column":51}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":51,"column":8},"generated":{"line":64,"column":52}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":51,"column":14},"generated":{"line":64,"column":58}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":51,"column":15},"generated":{"line":64,"column":59}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":51,"column":19},"generated":{"line":64,"column":63}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":51,"column":20},"generated":{"line":64,"column":64}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":51,"column":29},"generated":{"line":64,"column":73}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":51,"column":30},"generated":{"line":64,"column":74}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":51,"column":46},"generated":{"line":64,"column":80}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":51,"column":47},"generated":{"line":64,"column":81}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":52,"column":8},"generated":{"line":64,"column":83}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":52,"column":17},"generated":{"line":64,"column":92}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":52,"column":18},"generated":{"line":64,"column":93}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":52,"column":42},"generated":{"line":64,"column":107}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":53,"column":8},"generated":{"line":64,"column":109}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":53,"column":8},"generated":{"line":64,"column":115}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":53,"column":8},"generated":{"line":64,"column":116}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":53,"column":15},"generated":{"line":64,"column":123}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":53,"column":16},"generated":{"line":64,"column":124}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":53,"column":26},"generated":{"line":64,"column":134}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":53,"column":27},"generated":{"line":64,"column":135}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":53,"column":38},"generated":{"line":64,"column":146}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":53,"column":39},"generated":{"line":64,"column":147}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":54,"column":5},"generated":{"line":64,"column":148}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":55,"column":4},"generated":{"line":65,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":55,"column":13},"generated":{"line":65,"column":19}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":55,"column":14},"generated":{"line":65,"column":20}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":55,"column":22},"generated":{"line":65,"column":28}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":55,"column":25},"generated":{"line":65,"column":31}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":55,"column":48},"generated":{"line":65,"column":54}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":55,"column":52},"generated":{"line":65,"column":58}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":55,"column":73},"generated":{"line":65,"column":79}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":4},"generated":{"line":66,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":4},"generated":{"line":66,"column":11}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":4},"generated":{"line":66,"column":12}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":4},"generated":{"line":66,"column":14}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":4},"generated":{"line":66,"column":21}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":4},"generated":{"line":66,"column":22}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":20},"generated":{"line":66,"column":38}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":21},"generated":{"line":66,"column":40}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":28},"generated":{"line":66,"column":47}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":30},"generated":{"line":66,"column":49}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":38},"generated":{"line":66,"column":57}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":40},"generated":{"line":66,"column":59}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":49},"generated":{"line":66,"column":68}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":50},"generated":{"line":66,"column":69}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":50},"generated":{"line":67,"column":8}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":50},"generated":{"line":68,"column":8}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":50},"generated":{"line":69,"column":10}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":50},"generated":{"line":70,"column":6}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":50},"generated":{"line":71,"column":4}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":57,"column":50},"generated":{"line":72,"column":2}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":58,"column":1},"generated":{"line":72,"column":3}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":58,"column":1},"generated":{"line":73,"column":2}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":6},"generated":{"line":73,"column":18}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":13},"generated":{"line":73,"column":25}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":13},"generated":{"line":74,"column":4}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":13},"generated":{"line":75,"column":2}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":16,"column":13},"generated":{"line":76,"column":0}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":58,"column":1},"generated":{"line":76,"column":3}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":60,"column":13},"generated":{"line":77,"column":0}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":60,"column":13},"generated":{"line":77,"column":7}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":60,"column":13},"generated":{"line":77,"column":8}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":60,"column":19},"generated":{"line":77,"column":14}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":60,"column":22},"generated":{"line":77,"column":17}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":61,"column":4},"generated":{"line":78,"column":2}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":61,"column":8},"generated":{"line":78,"column":6}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":61,"column":10},"generated":{"line":78,"column":8}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":61,"column":18},"generated":{"line":78,"column":16}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":62,"column":4},"generated":{"line":79,"column":2}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":62,"column":11},"generated":{"line":79,"column":9}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":62,"column":4},"generated":{"line":79,"column":11}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":62,"column":11},"generated":{"line":79,"column":18}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":63,"column":4},"generated":{"line":80,"column":2}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":63,"column":15},"generated":{"line":80,"column":13}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":63,"column":4},"generated":{"line":80,"column":15}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":63,"column":15},"generated":{"line":80,"column":26}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":64,"column":4},"generated":{"line":81,"column":2}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":64,"column":11},"generated":{"line":81,"column":9}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":64,"column":4},"generated":{"line":81,"column":11}},{"source":"protocols/bitkey.ts","name":null,"original":{"line":65,"column":1},"generated":{"line":82,"column":1}}],"sources":{"protocols/bitkey.ts":"import { Address, Bsm, PubKey } from '@ts-bitcoin/core'\nimport { HandlerProps } from '../../types/common'\nimport { cellValue, saveProtocolData, sha256 } from '../utils'\n\nconst address = '13SrNDkVzY5bHBRKNu5iXTQ7K7VqTh5tJC'\n\nconst querySchema = [\n    { bitkey_signature: 'string' },\n    { user_signature: 'string' },\n    { paymail: 'string' },\n    { pubkey: 'string' },\n]\n\n// const handler = function (dataObj, cell, tape, tx) {\n// https://bitkey.network/how\nconst handler = async ({ dataObj, cell }: HandlerProps) => {\n    if (!cell.length) {\n        throw new Error('Invalid Bitkey tx')\n    }\n\n    console.log('cell length', cell.length)\n    const bitkeyObj: { [key: string]: string | boolean } = {}\n\n    // loop over the schema\n    for (const [idx, schemaField] of Object.entries(querySchema)) {\n        const x = parseInt(idx, 10)\n        const bitkeyField = Object.keys(schemaField)[0]\n        const schemaEncoding = Object.values(schemaField)[0]\n        bitkeyObj[bitkeyField] = cellValue(\n            cell[x + 1],\n            schemaEncoding\n        ) as string\n    }\n\n    const userAddress = Address.fromPubKey(\n        PubKey.fromString(bitkeyObj.pubkey as string)\n    ).toString()\n\n    // sha256( hex(paymail(USER)) | hex(pubkey(USER)) )\n    const paymailHex = Buffer.from(bitkeyObj.paymail as string).toString('hex')\n    const pubkeyHex = Buffer.from(bitkeyObj.pubkey as string).toString('hex')\n    const concatenated = paymailHex + pubkeyHex\n    const bitkeySignatureBuffer = await sha256(Buffer.from(concatenated, 'hex'))\n\n    const bitkeySignatureVerified = Bsm.verify(\n        bitkeySignatureBuffer,\n        bitkeyObj.bitkey_signature as string,\n        Address.fromString('13SrNDkVzY5bHBRKNu5iXTQ7K7VqTh5tJC')\n    )\n    const userSignatureVerified = Bsm.verify(\n        Buffer.from(bitkeyObj.pubkey as string),\n        bitkeyObj.user_signature as string,\n        Address.fromString(userAddress)\n    )\n    bitkeyObj.verified = bitkeySignatureVerified && userSignatureVerified\n\n    saveProtocolData(dataObj, 'BITKEY', bitkeyObj)\n}\n\nexport const BITKEY = {\n    name: 'BITKEY',\n    address,\n    querySchema,\n    handler,\n}\n"},"lineCount":null}},"error":null,"hash":"a24cd52896a414a52e41d39922fdd8cf","cacheData":{"env":{}}}