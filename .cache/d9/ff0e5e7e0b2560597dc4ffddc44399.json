{"id":"protocols/metanet.ts","dependencies":[{"name":"D:\\code\\bmap\\tsconfig.json","includedInParent":true,"mtime":1672330088416},{"name":"D:\\code\\bmap\\package.json","includedInParent":true,"mtime":1672330103231},{"name":"../utils","loc":{"line":4,"column":24,"index":160},"parent":"D:\\code\\bmap\\src\\protocols\\metanet.ts","resolved":"D:\\code\\bmap\\src\\utils.ts"},{"name":"buffer","parent":"D:\\code\\bmap\\src\\protocols\\metanet.ts","resolved":"D:\\code\\bmap\\node_modules\\buffer\\index.js"}],"generated":{"js":"var define;\nvar Buffer = require(\"buffer\").Buffer;\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.METANET = exports.getEnvSafeMetanetID = void 0;\nvar utils_1 = require(\"../utils\");\nvar address = 'meta';\nvar querySchema = [{\n  address: 'string'\n}, {\n  parent: 'string'\n}, {\n  name: 'string'\n}];\nvar getEnvSafeMetanetID = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(a, tx) {\n    var buf, hashBuf;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          // Calculate the node ID\n          buf = Buffer.from(a + tx);\n          _context.next = 3;\n          return (0, utils_1.sha256)(buf);\n        case 3:\n          hashBuf = _context.sent;\n          return _context.abrupt(\"return\", hashBuf.toString('hex'));\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function getEnvSafeMetanetID(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexports.getEnvSafeMetanetID = getEnvSafeMetanetID;\nvar handler = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref2) {\n    var dataObj, cell, tx, nodeId, node, parent, parentId;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          dataObj = _ref2.dataObj, cell = _ref2.cell, tx = _ref2.tx;\n          if (!(!cell.length || cell[0].s !== 'meta' || !cell[1] || !cell[1].s || !cell[2] || !cell[2].s || !tx)) {\n            _context2.next = 3;\n            break;\n          }\n          throw new Error('Invalid Metanet tx ' + tx);\n        case 3:\n          _context2.next = 5;\n          return (0, exports.getEnvSafeMetanetID)(cell[1].s, tx.tx.h);\n        case 5:\n          nodeId = _context2.sent;\n          // Described this node\n          node = {\n            a: cell[1].s,\n            tx: tx.tx.h,\n            id: nodeId\n          };\n          parent = {};\n          if (!tx.in) {\n            _context2.next = 13;\n            break;\n          }\n          _context2.next = 11;\n          return (0, exports.getEnvSafeMetanetID)(tx.in[0].e.a, cell[2].s);\n        case 11:\n          parentId = _context2.sent;\n          // Parent node\n          parent = {\n            a: tx.in[0].e.a,\n            tx: cell[2].s,\n            id: parentId\n          };\n        case 13:\n          if (!dataObj.METANET) {\n            dataObj.METANET = [];\n          }\n          dataObj.METANET.push({\n            node: node,\n            parent: parent\n          });\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function handler(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexports.METANET = {\n  name: 'METANET',\n  address: address,\n  querySchema: querySchema,\n  handler: handler\n};"},"sourceMaps":{"js":{"mappings":[{"source":"protocols/metanet.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":13,"column":0}},{"source":"protocols/metanet.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":13,"column":4}},{"source":"protocols/metanet.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":13,"column":11}},{"source":"protocols/metanet.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":13,"column":14}},{"source":"protocols/metanet.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":13,"column":21}},{"source":"protocols/metanet.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":13,"column":22}},{"source":"protocols/metanet.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":13,"column":32}},{"source":"protocols/metanet.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":13,"column":33}},{"source":"protocols/metanet.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":14,"column":0}},{"source":"protocols/metanet.ts","name":null,"original":{"line":4,"column":6},"generated":{"line":14,"column":4}},{"source":"protocols/metanet.ts","name":null,"original":{"line":4,"column":13},"generated":{"line":14,"column":11}},{"source":"protocols/metanet.ts","name":null,"original":{"line":4,"column":16},"generated":{"line":14,"column":14}},{"source":"protocols/metanet.ts","name":null,"original":{"line":4,"column":22},"generated":{"line":14,"column":20}},{"source":"protocols/metanet.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":15,"column":0}},{"source":"protocols/metanet.ts","name":null,"original":{"line":6,"column":6},"generated":{"line":15,"column":4}},{"source":"protocols/metanet.ts","name":null,"original":{"line":6,"column":17},"generated":{"line":15,"column":15}},{"source":"protocols/metanet.ts","name":null,"original":{"line":6,"column":20},"generated":{"line":15,"column":18}},{"source":"protocols/metanet.ts","name":null,"original":{"line":7,"column":4},"generated":{"line":15,"column":19}},{"source":"protocols/metanet.ts","name":null,"original":{"line":7,"column":6},"generated":{"line":16,"column":2}},{"source":"protocols/metanet.ts","name":null,"original":{"line":7,"column":13},"generated":{"line":16,"column":9}},{"source":"protocols/metanet.ts","name":null,"original":{"line":7,"column":15},"generated":{"line":16,"column":11}},{"source":"protocols/metanet.ts","name":null,"original":{"line":7,"column":23},"generated":{"line":17,"column":0}},{"source":"protocols/metanet.ts","name":null,"original":{"line":7,"column":25},"generated":{"line":17,"column":1}},{"source":"protocols/metanet.ts","name":null,"original":{"line":8,"column":4},"generated":{"line":17,"column":3}},{"source":"protocols/metanet.ts","name":null,"original":{"line":8,"column":6},"generated":{"line":18,"column":2}},{"source":"protocols/metanet.ts","name":null,"original":{"line":8,"column":12},"generated":{"line":18,"column":8}},{"source":"protocols/metanet.ts","name":null,"original":{"line":8,"column":14},"generated":{"line":18,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":8,"column":22},"generated":{"line":19,"column":0}},{"source":"protocols/metanet.ts","name":null,"original":{"line":8,"column":24},"generated":{"line":19,"column":1}},{"source":"protocols/metanet.ts","name":null,"original":{"line":9,"column":4},"generated":{"line":19,"column":3}},{"source":"protocols/metanet.ts","name":null,"original":{"line":9,"column":6},"generated":{"line":20,"column":2}},{"source":"protocols/metanet.ts","name":null,"original":{"line":9,"column":10},"generated":{"line":20,"column":6}},{"source":"protocols/metanet.ts","name":null,"original":{"line":9,"column":12},"generated":{"line":20,"column":8}},{"source":"protocols/metanet.ts","name":null,"original":{"line":9,"column":20},"generated":{"line":21,"column":0}},{"source":"protocols/metanet.ts","name":null,"original":{"line":9,"column":22},"generated":{"line":21,"column":1}},{"source":"protocols/metanet.ts","name":null,"original":{"line":10,"column":1},"generated":{"line":21,"column":2}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":7},"generated":{"line":22,"column":0}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":13},"generated":{"line":22,"column":4}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":32},"generated":{"line":22,"column":23}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":32},"generated":{"line":23,"column":2}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":35},"generated":{"line":23,"column":72}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":51},"generated":{"line":23,"column":89}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":60},"generated":{"line":23,"column":90}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":62},"generated":{"line":23,"column":92}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":72},"generated":{"line":23,"column":94}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":72},"generated":{"line":24,"column":4}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":72},"generated":{"line":25,"column":4}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":72},"generated":{"line":26,"column":6}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":72},"generated":{"line":27,"column":8}},{"source":"protocols/metanet.ts","name":null,"original":{"line":13,"column":4},"generated":{"line":28,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":14,"column":10},"generated":{"line":29,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":14,"column":13},"generated":{"line":29,"column":13}},{"source":"protocols/metanet.ts","name":null,"original":{"line":14,"column":16},"generated":{"line":29,"column":16}},{"source":"protocols/metanet.ts","name":null,"original":{"line":14,"column":22},"generated":{"line":29,"column":22}},{"source":"protocols/metanet.ts","name":null,"original":{"line":14,"column":23},"generated":{"line":29,"column":23}},{"source":"protocols/metanet.ts","name":null,"original":{"line":14,"column":27},"generated":{"line":29,"column":27}},{"source":"protocols/metanet.ts","name":null,"original":{"line":14,"column":28},"generated":{"line":29,"column":28}},{"source":"protocols/metanet.ts","name":null,"original":{"line":14,"column":29},"generated":{"line":29,"column":29}},{"source":"protocols/metanet.ts","name":null,"original":{"line":14,"column":32},"generated":{"line":29,"column":32}},{"source":"protocols/metanet.ts","name":null,"original":{"line":14,"column":34},"generated":{"line":29,"column":34}},{"source":"protocols/metanet.ts","name":null,"original":{"line":14,"column":35},"generated":{"line":29,"column":35}},{"source":"protocols/metanet.ts","name":null,"original":{"line":14,"column":35},"generated":{"line":30,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":14,"column":35},"generated":{"line":31,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":15,"column":26},"generated":{"line":31,"column":17}},{"source":"protocols/metanet.ts","name":null,"original":{"line":15,"column":26},"generated":{"line":31,"column":18}},{"source":"protocols/metanet.ts","name":null,"original":{"line":15,"column":26},"generated":{"line":31,"column":19}},{"source":"protocols/metanet.ts","name":null,"original":{"line":15,"column":26},"generated":{"line":31,"column":21}},{"source":"protocols/metanet.ts","name":null,"original":{"line":15,"column":26},"generated":{"line":31,"column":28}},{"source":"protocols/metanet.ts","name":null,"original":{"line":15,"column":26},"generated":{"line":31,"column":29}},{"source":"protocols/metanet.ts","name":null,"original":{"line":15,"column":32},"generated":{"line":31,"column":35}},{"source":"protocols/metanet.ts","name":null,"original":{"line":15,"column":33},"generated":{"line":31,"column":37}},{"source":"protocols/metanet.ts","name":null,"original":{"line":15,"column":36},"generated":{"line":31,"column":40}},{"source":"protocols/metanet.ts","name":null,"original":{"line":15,"column":37},"generated":{"line":31,"column":41}},{"source":"protocols/metanet.ts","name":null,"original":{"line":15,"column":37},"generated":{"line":32,"column":8}},{"source":"protocols/metanet.ts","name":null,"original":{"line":15,"column":10},"generated":{"line":33,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":15,"column":17},"generated":{"line":33,"column":17}},{"source":"protocols/metanet.ts","name":null,"original":{"line":15,"column":17},"generated":{"line":34,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":16,"column":11},"generated":{"line":34,"column":43}},{"source":"protocols/metanet.ts","name":null,"original":{"line":16,"column":18},"generated":{"line":34,"column":50}},{"source":"protocols/metanet.ts","name":null,"original":{"line":16,"column":19},"generated":{"line":34,"column":51}},{"source":"protocols/metanet.ts","name":null,"original":{"line":16,"column":27},"generated":{"line":34,"column":59}},{"source":"protocols/metanet.ts","name":null,"original":{"line":16,"column":28},"generated":{"line":34,"column":60}},{"source":"protocols/metanet.ts","name":null,"original":{"line":16,"column":33},"generated":{"line":34,"column":65}},{"source":"protocols/metanet.ts","name":null,"original":{"line":16,"column":34},"generated":{"line":34,"column":66}},{"source":"protocols/metanet.ts","name":null,"original":{"line":16,"column":34},"generated":{"line":35,"column":8}},{"source":"protocols/metanet.ts","name":null,"original":{"line":16,"column":34},"generated":{"line":36,"column":8}},{"source":"protocols/metanet.ts","name":null,"original":{"line":16,"column":34},"generated":{"line":37,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":16,"column":34},"generated":{"line":38,"column":6}},{"source":"protocols/metanet.ts","name":null,"original":{"line":16,"column":34},"generated":{"line":39,"column":4}},{"source":"protocols/metanet.ts","name":null,"original":{"line":16,"column":34},"generated":{"line":40,"column":2}},{"source":"protocols/metanet.ts","name":null,"original":{"line":17,"column":1},"generated":{"line":40,"column":3}},{"source":"protocols/metanet.ts","name":null,"original":{"line":17,"column":1},"generated":{"line":41,"column":2}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":13},"generated":{"line":41,"column":18}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":32},"generated":{"line":41,"column":37}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":32},"generated":{"line":42,"column":4}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":32},"generated":{"line":43,"column":2}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":32},"generated":{"line":44,"column":0}},{"source":"protocols/metanet.ts","name":null,"original":{"line":17,"column":1},"generated":{"line":44,"column":3}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":13},"generated":{"line":45,"column":0}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":13},"generated":{"line":45,"column":7}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":13},"generated":{"line":45,"column":8}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":32},"generated":{"line":45,"column":27}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":32},"generated":{"line":45,"column":30}},{"source":"protocols/metanet.ts","name":null,"original":{"line":12,"column":32},"generated":{"line":45,"column":49}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":46,"column":0}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":6},"generated":{"line":46,"column":4}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":13},"generated":{"line":46,"column":11}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":13},"generated":{"line":47,"column":2}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":16},"generated":{"line":47,"column":73}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":16},"generated":{"line":48,"column":4}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":16},"generated":{"line":49,"column":4}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":16},"generated":{"line":50,"column":6}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":16},"generated":{"line":51,"column":8}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":25},"generated":{"line":52,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":32},"generated":{"line":52,"column":17}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":25},"generated":{"line":52,"column":26}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":32},"generated":{"line":52,"column":33}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":34},"generated":{"line":52,"column":35}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":38},"generated":{"line":52,"column":39}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":34},"generated":{"line":52,"column":48}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":38},"generated":{"line":52,"column":52}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":40},"generated":{"line":52,"column":54}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":42},"generated":{"line":52,"column":56}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":40},"generated":{"line":52,"column":65}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":42},"generated":{"line":52,"column":67}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":42},"generated":{"line":53,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":21,"column":8},"generated":{"line":53,"column":16}},{"source":"protocols/metanet.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":53,"column":17}},{"source":"protocols/metanet.ts","name":null,"original":{"line":21,"column":13},"generated":{"line":53,"column":21}},{"source":"protocols/metanet.ts","name":null,"original":{"line":21,"column":14},"generated":{"line":53,"column":22}},{"source":"protocols/metanet.ts","name":null,"original":{"line":21,"column":20},"generated":{"line":53,"column":28}},{"source":"protocols/metanet.ts","name":null,"original":{"line":22,"column":8},"generated":{"line":53,"column":32}},{"source":"protocols/metanet.ts","name":null,"original":{"line":22,"column":12},"generated":{"line":53,"column":36}},{"source":"protocols/metanet.ts","name":null,"original":{"line":22,"column":13},"generated":{"line":53,"column":37}},{"source":"protocols/metanet.ts","name":null,"original":{"line":22,"column":14},"generated":{"line":53,"column":38}},{"source":"protocols/metanet.ts","name":null,"original":{"line":22,"column":15},"generated":{"line":53,"column":39}},{"source":"protocols/metanet.ts","name":null,"original":{"line":22,"column":16},"generated":{"line":53,"column":40}},{"source":"protocols/metanet.ts","name":null,"original":{"line":22,"column":17},"generated":{"line":53,"column":41}},{"source":"protocols/metanet.ts","name":null,"original":{"line":22,"column":22},"generated":{"line":53,"column":46}},{"source":"protocols/metanet.ts","name":null,"original":{"line":22,"column":28},"generated":{"line":53,"column":52}},{"source":"protocols/metanet.ts","name":null,"original":{"line":23,"column":8},"generated":{"line":53,"column":56}},{"source":"protocols/metanet.ts","name":null,"original":{"line":23,"column":9},"generated":{"line":53,"column":57}},{"source":"protocols/metanet.ts","name":null,"original":{"line":23,"column":13},"generated":{"line":53,"column":61}},{"source":"protocols/metanet.ts","name":null,"original":{"line":23,"column":14},"generated":{"line":53,"column":62}},{"source":"protocols/metanet.ts","name":null,"original":{"line":23,"column":15},"generated":{"line":53,"column":63}},{"source":"protocols/metanet.ts","name":null,"original":{"line":23,"column":16},"generated":{"line":53,"column":64}},{"source":"protocols/metanet.ts","name":null,"original":{"line":24,"column":8},"generated":{"line":53,"column":68}},{"source":"protocols/metanet.ts","name":null,"original":{"line":24,"column":9},"generated":{"line":53,"column":69}},{"source":"protocols/metanet.ts","name":null,"original":{"line":24,"column":13},"generated":{"line":53,"column":73}},{"source":"protocols/metanet.ts","name":null,"original":{"line":24,"column":14},"generated":{"line":53,"column":74}},{"source":"protocols/metanet.ts","name":null,"original":{"line":24,"column":15},"generated":{"line":53,"column":75}},{"source":"protocols/metanet.ts","name":null,"original":{"line":24,"column":16},"generated":{"line":53,"column":76}},{"source":"protocols/metanet.ts","name":null,"original":{"line":24,"column":17},"generated":{"line":53,"column":77}},{"source":"protocols/metanet.ts","name":null,"original":{"line":24,"column":18},"generated":{"line":53,"column":78}},{"source":"protocols/metanet.ts","name":null,"original":{"line":25,"column":8},"generated":{"line":53,"column":82}},{"source":"protocols/metanet.ts","name":null,"original":{"line":25,"column":9},"generated":{"line":53,"column":83}},{"source":"protocols/metanet.ts","name":null,"original":{"line":25,"column":13},"generated":{"line":53,"column":87}},{"source":"protocols/metanet.ts","name":null,"original":{"line":25,"column":14},"generated":{"line":53,"column":88}},{"source":"protocols/metanet.ts","name":null,"original":{"line":25,"column":15},"generated":{"line":53,"column":89}},{"source":"protocols/metanet.ts","name":null,"original":{"line":25,"column":16},"generated":{"line":53,"column":90}},{"source":"protocols/metanet.ts","name":null,"original":{"line":26,"column":8},"generated":{"line":53,"column":94}},{"source":"protocols/metanet.ts","name":null,"original":{"line":26,"column":9},"generated":{"line":53,"column":95}},{"source":"protocols/metanet.ts","name":null,"original":{"line":26,"column":13},"generated":{"line":53,"column":99}},{"source":"protocols/metanet.ts","name":null,"original":{"line":26,"column":14},"generated":{"line":53,"column":100}},{"source":"protocols/metanet.ts","name":null,"original":{"line":26,"column":15},"generated":{"line":53,"column":101}},{"source":"protocols/metanet.ts","name":null,"original":{"line":26,"column":16},"generated":{"line":53,"column":102}},{"source":"protocols/metanet.ts","name":null,"original":{"line":26,"column":17},"generated":{"line":53,"column":103}},{"source":"protocols/metanet.ts","name":null,"original":{"line":26,"column":18},"generated":{"line":53,"column":104}},{"source":"protocols/metanet.ts","name":null,"original":{"line":27,"column":8},"generated":{"line":53,"column":108}},{"source":"protocols/metanet.ts","name":null,"original":{"line":27,"column":9},"generated":{"line":53,"column":109}},{"source":"protocols/metanet.ts","name":null,"original":{"line":27,"column":11},"generated":{"line":53,"column":111}},{"source":"protocols/metanet.ts","name":null,"original":{"line":27,"column":11},"generated":{"line":54,"column":12}},{"source":"protocols/metanet.ts","name":null,"original":{"line":27,"column":11},"generated":{"line":55,"column":12}},{"source":"protocols/metanet.ts","name":null,"original":{"line":27,"column":11},"generated":{"line":56,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":27,"column":11},"generated":{"line":57,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":29,"column":14},"generated":{"line":57,"column":16}},{"source":"protocols/metanet.ts","name":null,"original":{"line":29,"column":18},"generated":{"line":57,"column":20}},{"source":"protocols/metanet.ts","name":null,"original":{"line":29,"column":23},"generated":{"line":57,"column":25}},{"source":"protocols/metanet.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":57,"column":26}},{"source":"protocols/metanet.ts","name":null,"original":{"line":29,"column":45},"generated":{"line":57,"column":47}},{"source":"protocols/metanet.ts","name":null,"original":{"line":29,"column":48},"generated":{"line":57,"column":50}},{"source":"protocols/metanet.ts","name":null,"original":{"line":29,"column":50},"generated":{"line":57,"column":52}},{"source":"protocols/metanet.ts","name":null,"original":{"line":29,"column":51},"generated":{"line":57,"column":53}},{"source":"protocols/metanet.ts","name":null,"original":{"line":29,"column":51},"generated":{"line":58,"column":8}},{"source":"protocols/metanet.ts","name":null,"original":{"line":29,"column":51},"generated":{"line":59,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":29,"column":51},"generated":{"line":60,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":25},"generated":{"line":60,"column":17}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":25},"generated":{"line":60,"column":18}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":25},"generated":{"line":60,"column":19}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":25},"generated":{"line":60,"column":21}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":25},"generated":{"line":60,"column":28}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":25},"generated":{"line":60,"column":29}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":44},"generated":{"line":60,"column":48}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":45},"generated":{"line":60,"column":50}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":49},"generated":{"line":60,"column":54}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":50},"generated":{"line":60,"column":55}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":51},"generated":{"line":60,"column":56}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":52},"generated":{"line":60,"column":57}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":53},"generated":{"line":60,"column":58}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":54},"generated":{"line":60,"column":59}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":56},"generated":{"line":60,"column":61}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":58},"generated":{"line":60,"column":63}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":59},"generated":{"line":60,"column":64}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":61},"generated":{"line":60,"column":66}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":62},"generated":{"line":60,"column":67}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":63},"generated":{"line":60,"column":68}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":64},"generated":{"line":60,"column":69}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":64},"generated":{"line":61,"column":8}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":10},"generated":{"line":62,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":33,"column":16},"generated":{"line":62,"column":16}},{"source":"protocols/metanet.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":63,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":35,"column":10},"generated":{"line":64,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":35,"column":14},"generated":{"line":64,"column":14}},{"source":"protocols/metanet.ts","name":null,"original":{"line":35,"column":17},"generated":{"line":64,"column":17}},{"source":"protocols/metanet.ts","name":null,"original":{"line":36,"column":8},"generated":{"line":65,"column":12}},{"source":"protocols/metanet.ts","name":null,"original":{"line":36,"column":9},"generated":{"line":65,"column":13}},{"source":"protocols/metanet.ts","name":null,"original":{"line":36,"column":11},"generated":{"line":65,"column":15}},{"source":"protocols/metanet.ts","name":null,"original":{"line":36,"column":15},"generated":{"line":65,"column":19}},{"source":"protocols/metanet.ts","name":null,"original":{"line":36,"column":16},"generated":{"line":65,"column":20}},{"source":"protocols/metanet.ts","name":null,"original":{"line":36,"column":17},"generated":{"line":65,"column":21}},{"source":"protocols/metanet.ts","name":null,"original":{"line":36,"column":18},"generated":{"line":65,"column":22}},{"source":"protocols/metanet.ts","name":null,"original":{"line":36,"column":19},"generated":{"line":65,"column":23}},{"source":"protocols/metanet.ts","name":null,"original":{"line":36,"column":20},"generated":{"line":65,"column":24}},{"source":"protocols/metanet.ts","name":null,"original":{"line":37,"column":8},"generated":{"line":66,"column":12}},{"source":"protocols/metanet.ts","name":null,"original":{"line":37,"column":10},"generated":{"line":66,"column":14}},{"source":"protocols/metanet.ts","name":null,"original":{"line":37,"column":12},"generated":{"line":66,"column":16}},{"source":"protocols/metanet.ts","name":null,"original":{"line":37,"column":14},"generated":{"line":66,"column":18}},{"source":"protocols/metanet.ts","name":null,"original":{"line":37,"column":15},"generated":{"line":66,"column":19}},{"source":"protocols/metanet.ts","name":null,"original":{"line":37,"column":17},"generated":{"line":66,"column":21}},{"source":"protocols/metanet.ts","name":null,"original":{"line":37,"column":18},"generated":{"line":66,"column":22}},{"source":"protocols/metanet.ts","name":null,"original":{"line":37,"column":19},"generated":{"line":66,"column":23}},{"source":"protocols/metanet.ts","name":null,"original":{"line":38,"column":8},"generated":{"line":67,"column":12}},{"source":"protocols/metanet.ts","name":null,"original":{"line":38,"column":10},"generated":{"line":67,"column":14}},{"source":"protocols/metanet.ts","name":null,"original":{"line":38,"column":12},"generated":{"line":67,"column":16}},{"source":"protocols/metanet.ts","name":null,"original":{"line":39,"column":5},"generated":{"line":68,"column":11}},{"source":"protocols/metanet.ts","name":null,"original":{"line":40,"column":8},"generated":{"line":69,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":40,"column":14},"generated":{"line":69,"column":16}},{"source":"protocols/metanet.ts","name":null,"original":{"line":40,"column":17},"generated":{"line":69,"column":19}},{"source":"protocols/metanet.ts","name":null,"original":{"line":40,"column":17},"generated":{"line":69,"column":20}},{"source":"protocols/metanet.ts","name":null,"original":{"line":40,"column":34},"generated":{"line":69,"column":21}},{"source":"protocols/metanet.ts","name":null,"original":{"line":40,"column":34},"generated":{"line":70,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":41,"column":8},"generated":{"line":70,"column":15}},{"source":"protocols/metanet.ts","name":null,"original":{"line":41,"column":10},"generated":{"line":70,"column":17}},{"source":"protocols/metanet.ts","name":null,"original":{"line":41,"column":11},"generated":{"line":70,"column":18}},{"source":"protocols/metanet.ts","name":null,"original":{"line":41,"column":13},"generated":{"line":70,"column":20}},{"source":"protocols/metanet.ts","name":null,"original":{"line":41,"column":13},"generated":{"line":71,"column":12}},{"source":"protocols/metanet.ts","name":null,"original":{"line":41,"column":13},"generated":{"line":72,"column":12}},{"source":"protocols/metanet.ts","name":null,"original":{"line":41,"column":13},"generated":{"line":73,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":41,"column":13},"generated":{"line":74,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":41,"column":13},"generated":{"line":75,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":31},"generated":{"line":75,"column":17}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":31},"generated":{"line":75,"column":18}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":31},"generated":{"line":75,"column":19}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":31},"generated":{"line":75,"column":21}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":31},"generated":{"line":75,"column":28}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":31},"generated":{"line":75,"column":29}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":50},"generated":{"line":75,"column":48}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":51},"generated":{"line":75,"column":50}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":53},"generated":{"line":75,"column":52}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":54},"generated":{"line":75,"column":53}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":56},"generated":{"line":75,"column":55}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":57},"generated":{"line":75,"column":56}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":58},"generated":{"line":75,"column":57}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":59},"generated":{"line":75,"column":58}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":60},"generated":{"line":75,"column":59}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":61},"generated":{"line":75,"column":60}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":62},"generated":{"line":75,"column":61}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":63},"generated":{"line":75,"column":62}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":65},"generated":{"line":75,"column":64}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":69},"generated":{"line":75,"column":68}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":70},"generated":{"line":75,"column":69}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":71},"generated":{"line":75,"column":70}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":72},"generated":{"line":75,"column":71}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":73},"generated":{"line":75,"column":72}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":74},"generated":{"line":75,"column":73}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":75},"generated":{"line":75,"column":74}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":75},"generated":{"line":76,"column":8}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":14},"generated":{"line":77,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":42,"column":22},"generated":{"line":77,"column":18}},{"source":"protocols/metanet.ts","name":null,"original":{"line":43,"column":8},"generated":{"line":78,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":44,"column":8},"generated":{"line":79,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":44,"column":14},"generated":{"line":79,"column":16}},{"source":"protocols/metanet.ts","name":null,"original":{"line":44,"column":17},"generated":{"line":79,"column":19}},{"source":"protocols/metanet.ts","name":null,"original":{"line":45,"column":12},"generated":{"line":80,"column":12}},{"source":"protocols/metanet.ts","name":null,"original":{"line":45,"column":13},"generated":{"line":80,"column":13}},{"source":"protocols/metanet.ts","name":null,"original":{"line":45,"column":15},"generated":{"line":80,"column":15}},{"source":"protocols/metanet.ts","name":null,"original":{"line":45,"column":17},"generated":{"line":80,"column":17}},{"source":"protocols/metanet.ts","name":null,"original":{"line":45,"column":18},"generated":{"line":80,"column":18}},{"source":"protocols/metanet.ts","name":null,"original":{"line":45,"column":20},"generated":{"line":80,"column":20}},{"source":"protocols/metanet.ts","name":null,"original":{"line":45,"column":21},"generated":{"line":80,"column":21}},{"source":"protocols/metanet.ts","name":null,"original":{"line":45,"column":22},"generated":{"line":80,"column":22}},{"source":"protocols/metanet.ts","name":null,"original":{"line":45,"column":23},"generated":{"line":80,"column":23}},{"source":"protocols/metanet.ts","name":null,"original":{"line":45,"column":24},"generated":{"line":80,"column":24}},{"source":"protocols/metanet.ts","name":null,"original":{"line":45,"column":25},"generated":{"line":80,"column":25}},{"source":"protocols/metanet.ts","name":null,"original":{"line":45,"column":26},"generated":{"line":80,"column":26}},{"source":"protocols/metanet.ts","name":null,"original":{"line":45,"column":27},"generated":{"line":80,"column":27}},{"source":"protocols/metanet.ts","name":null,"original":{"line":46,"column":12},"generated":{"line":81,"column":12}},{"source":"protocols/metanet.ts","name":null,"original":{"line":46,"column":14},"generated":{"line":81,"column":14}},{"source":"protocols/metanet.ts","name":null,"original":{"line":46,"column":16},"generated":{"line":81,"column":16}},{"source":"protocols/metanet.ts","name":null,"original":{"line":46,"column":20},"generated":{"line":81,"column":20}},{"source":"protocols/metanet.ts","name":null,"original":{"line":46,"column":21},"generated":{"line":81,"column":21}},{"source":"protocols/metanet.ts","name":null,"original":{"line":46,"column":22},"generated":{"line":81,"column":22}},{"source":"protocols/metanet.ts","name":null,"original":{"line":46,"column":23},"generated":{"line":81,"column":23}},{"source":"protocols/metanet.ts","name":null,"original":{"line":46,"column":24},"generated":{"line":81,"column":24}},{"source":"protocols/metanet.ts","name":null,"original":{"line":46,"column":25},"generated":{"line":81,"column":25}},{"source":"protocols/metanet.ts","name":null,"original":{"line":47,"column":12},"generated":{"line":82,"column":12}},{"source":"protocols/metanet.ts","name":null,"original":{"line":47,"column":14},"generated":{"line":82,"column":14}},{"source":"protocols/metanet.ts","name":null,"original":{"line":47,"column":16},"generated":{"line":82,"column":16}},{"source":"protocols/metanet.ts","name":null,"original":{"line":48,"column":9},"generated":{"line":83,"column":11}},{"source":"protocols/metanet.ts","name":null,"original":{"line":48,"column":9},"generated":{"line":84,"column":8}},{"source":"protocols/metanet.ts","name":null,"original":{"line":51,"column":4},"generated":{"line":85,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":51,"column":8},"generated":{"line":85,"column":14}},{"source":"protocols/metanet.ts","name":null,"original":{"line":51,"column":9},"generated":{"line":85,"column":15}},{"source":"protocols/metanet.ts","name":null,"original":{"line":51,"column":16},"generated":{"line":85,"column":22}},{"source":"protocols/metanet.ts","name":null,"original":{"line":51,"column":17},"generated":{"line":85,"column":23}},{"source":"protocols/metanet.ts","name":null,"original":{"line":51,"column":24},"generated":{"line":85,"column":30}},{"source":"protocols/metanet.ts","name":null,"original":{"line":51,"column":26},"generated":{"line":85,"column":32}},{"source":"protocols/metanet.ts","name":null,"original":{"line":52,"column":8},"generated":{"line":86,"column":12}},{"source":"protocols/metanet.ts","name":null,"original":{"line":52,"column":15},"generated":{"line":86,"column":19}},{"source":"protocols/metanet.ts","name":null,"original":{"line":52,"column":16},"generated":{"line":86,"column":20}},{"source":"protocols/metanet.ts","name":null,"original":{"line":52,"column":23},"generated":{"line":86,"column":27}},{"source":"protocols/metanet.ts","name":null,"original":{"line":52,"column":26},"generated":{"line":86,"column":30}},{"source":"protocols/metanet.ts","name":null,"original":{"line":52,"column":28},"generated":{"line":86,"column":32}},{"source":"protocols/metanet.ts","name":null,"original":{"line":54,"column":4},"generated":{"line":88,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":54,"column":11},"generated":{"line":88,"column":17}},{"source":"protocols/metanet.ts","name":null,"original":{"line":54,"column":12},"generated":{"line":88,"column":18}},{"source":"protocols/metanet.ts","name":null,"original":{"line":54,"column":19},"generated":{"line":88,"column":25}},{"source":"protocols/metanet.ts","name":null,"original":{"line":54,"column":20},"generated":{"line":88,"column":26}},{"source":"protocols/metanet.ts","name":null,"original":{"line":54,"column":24},"generated":{"line":88,"column":30}},{"source":"protocols/metanet.ts","name":null,"original":{"line":54,"column":25},"generated":{"line":88,"column":31}},{"source":"protocols/metanet.ts","name":null,"original":{"line":55,"column":8},"generated":{"line":89,"column":12}},{"source":"protocols/metanet.ts","name":null,"original":{"line":55,"column":12},"generated":{"line":89,"column":16}},{"source":"protocols/metanet.ts","name":null,"original":{"line":55,"column":8},"generated":{"line":89,"column":18}},{"source":"protocols/metanet.ts","name":null,"original":{"line":55,"column":12},"generated":{"line":89,"column":22}},{"source":"protocols/metanet.ts","name":null,"original":{"line":56,"column":8},"generated":{"line":90,"column":12}},{"source":"protocols/metanet.ts","name":null,"original":{"line":56,"column":14},"generated":{"line":90,"column":18}},{"source":"protocols/metanet.ts","name":null,"original":{"line":56,"column":8},"generated":{"line":90,"column":20}},{"source":"protocols/metanet.ts","name":null,"original":{"line":57,"column":16},"generated":{"line":91,"column":11}},{"source":"protocols/metanet.ts","name":null,"original":{"line":57,"column":17},"generated":{"line":91,"column":12}},{"source":"protocols/metanet.ts","name":null,"original":{"line":57,"column":17},"generated":{"line":92,"column":8}},{"source":"protocols/metanet.ts","name":null,"original":{"line":57,"column":17},"generated":{"line":93,"column":8}},{"source":"protocols/metanet.ts","name":null,"original":{"line":57,"column":17},"generated":{"line":94,"column":10}},{"source":"protocols/metanet.ts","name":null,"original":{"line":57,"column":17},"generated":{"line":95,"column":6}},{"source":"protocols/metanet.ts","name":null,"original":{"line":57,"column":17},"generated":{"line":96,"column":4}},{"source":"protocols/metanet.ts","name":null,"original":{"line":57,"column":17},"generated":{"line":97,"column":2}},{"source":"protocols/metanet.ts","name":null,"original":{"line":58,"column":1},"generated":{"line":97,"column":3}},{"source":"protocols/metanet.ts","name":null,"original":{"line":58,"column":1},"generated":{"line":98,"column":2}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":6},"generated":{"line":98,"column":18}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":13},"generated":{"line":98,"column":25}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":13},"generated":{"line":99,"column":4}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":13},"generated":{"line":100,"column":2}},{"source":"protocols/metanet.ts","name":null,"original":{"line":19,"column":13},"generated":{"line":101,"column":0}},{"source":"protocols/metanet.ts","name":null,"original":{"line":58,"column":1},"generated":{"line":101,"column":3}},{"source":"protocols/metanet.ts","name":null,"original":{"line":60,"column":13},"generated":{"line":102,"column":0}},{"source":"protocols/metanet.ts","name":null,"original":{"line":60,"column":13},"generated":{"line":102,"column":7}},{"source":"protocols/metanet.ts","name":null,"original":{"line":60,"column":13},"generated":{"line":102,"column":8}},{"source":"protocols/metanet.ts","name":null,"original":{"line":60,"column":20},"generated":{"line":102,"column":15}},{"source":"protocols/metanet.ts","name":null,"original":{"line":60,"column":23},"generated":{"line":102,"column":18}},{"source":"protocols/metanet.ts","name":null,"original":{"line":61,"column":4},"generated":{"line":103,"column":2}},{"source":"protocols/metanet.ts","name":null,"original":{"line":61,"column":8},"generated":{"line":103,"column":6}},{"source":"protocols/metanet.ts","name":null,"original":{"line":61,"column":10},"generated":{"line":103,"column":8}},{"source":"protocols/metanet.ts","name":null,"original":{"line":61,"column":19},"generated":{"line":103,"column":17}},{"source":"protocols/metanet.ts","name":null,"original":{"line":62,"column":4},"generated":{"line":104,"column":2}},{"source":"protocols/metanet.ts","name":null,"original":{"line":62,"column":11},"generated":{"line":104,"column":9}},{"source":"protocols/metanet.ts","name":null,"original":{"line":62,"column":4},"generated":{"line":104,"column":11}},{"source":"protocols/metanet.ts","name":null,"original":{"line":62,"column":11},"generated":{"line":104,"column":18}},{"source":"protocols/metanet.ts","name":null,"original":{"line":63,"column":4},"generated":{"line":105,"column":2}},{"source":"protocols/metanet.ts","name":null,"original":{"line":63,"column":15},"generated":{"line":105,"column":13}},{"source":"protocols/metanet.ts","name":null,"original":{"line":63,"column":4},"generated":{"line":105,"column":15}},{"source":"protocols/metanet.ts","name":null,"original":{"line":63,"column":15},"generated":{"line":105,"column":26}},{"source":"protocols/metanet.ts","name":null,"original":{"line":64,"column":4},"generated":{"line":106,"column":2}},{"source":"protocols/metanet.ts","name":null,"original":{"line":64,"column":11},"generated":{"line":106,"column":9}},{"source":"protocols/metanet.ts","name":null,"original":{"line":64,"column":4},"generated":{"line":106,"column":11}},{"source":"protocols/metanet.ts","name":null,"original":{"line":65,"column":1},"generated":{"line":107,"column":1}}],"sources":{"protocols/metanet.ts":"import { HandlerProps, MetaNet, MetanetNode } from '../../types/common'\nimport { sha256 } from '../utils'\n\nconst address = 'meta'\n\nconst querySchema = [\n    { address: 'string' },\n    { parent: 'string' },\n    { name: 'string' },\n]\n\nexport const getEnvSafeMetanetID = async function (a: string, tx: string) {\n    // Calculate the node ID\n    const buf = Buffer.from(a + tx)\n    const hashBuf = await sha256(buf)\n    return hashBuf.toString('hex')\n}\n\nconst handler = async ({ dataObj, cell, tx }: HandlerProps) => {\n    if (\n        !cell.length ||\n        cell[0].s !== 'meta' ||\n        !cell[1] ||\n        !cell[1].s ||\n        !cell[2] ||\n        !cell[2].s ||\n        !tx\n    ) {\n        throw new Error('Invalid Metanet tx ' + tx)\n    }\n    // For now, we just copy from MOM keys later if available, or keep BOB format\n\n    const nodeId = await getEnvSafeMetanetID(cell[1].s, tx.tx.h)\n    // Described this node\n    const node = {\n        a: cell[1].s,\n        tx: tx.tx.h,\n        id: nodeId,\n    }\n    let parent = {} as MetanetNode\n    if (tx.in) {\n        const parentId = await getEnvSafeMetanetID(tx.in[0].e.a, cell[2].s)\n        // Parent node\n        parent = {\n            a: tx.in[0].e.a,\n            tx: cell[2].s,\n            id: parentId,\n        }\n    }\n\n    if (!dataObj.METANET) {\n        dataObj.METANET = []\n    }\n    dataObj.METANET.push({\n        node,\n        parent,\n    } as MetaNet)\n}\n\nexport const METANET = {\n    name: 'METANET',\n    address,\n    querySchema,\n    handler,\n}\n"},"lineCount":null}},"error":null,"hash":"5b4c753a2e5bc238f67244dff7217943","cacheData":{"env":{}}}